

--- Start of _docs.txt ---

Documentation from https://vitejs.dev/guide/
















Getting Started | Vite


















































































 Skip to content 

Vite

Search

K

Main Navigation

Guide

Config

Plugins

Resources

Team

Blog

Releases

Mastodon

Twitter

Discord Chat

Awesome Vite

ViteConf

DEV Community

Changelog

Contributing

Version

Vite 4 Docs

Vite 3 Docs

Vite 2 Docs

English

简体中文

日本語

Español

Português

한국어

Deutsch

English

简体中文

日本語

Español

Português

한국어

Deutsch

Appearance

Menu

Return to top

 Sidebar Navigation 

Guide

Why Vite

Getting Started

Features

CLI

Using Plugins

Dependency Pre-Bundling

Static Asset Handling

Building for Production

Deploying a Static Site

Env Variables and Modes

Server-Side Rendering (SSR)

Backend Integration

Comparisons

Troubleshooting

Performance

Philosophy

Migration from v4

APIs

Plugin API

HMR API

JavaScript API

Vite Runtime API

Config Reference

On this page

Beyond Fast

ViteConf 2023

Watch the replay!

Getting Started 

​

Overview 

​

Vite (French word for "quick", pronounced 

/vit/

, like "veet") is a build tool that aims to provide a faster and leaner development experience for modern web projects. It consists of two major parts:

A dev server that provides 

rich feature enhancements

 over 

native ES modules

, for example extremely fast 

Hot Module Replacement (HMR)

.

A build command that bundles your code with 

Rollup

, pre-configured to output highly optimized static assets for production.

Vite is opinionated and comes with sensible defaults out of the box. Read about what's possible in the 

Features Guide

. Support for frameworks or integration with other tools is possible through 

Plugins

. The 

Config Section

 explains how to adapt Vite to your project if needed.

Vite is also highly extensible via its 

Plugin API

 and 

JavaScript API

 with full typing support.

You can learn more about the rationale behind the project in the 

Why Vite

 section.

Browser Support 

​

During development, Vite sets 

esnext

 as the transform target

, because we assume a modern browser is used and it supports all of the latest JavaScript and CSS features. This prevents syntax lowering, letting Vite serve modules as close as possible to the original source code.

For the production build, by default Vite targets browsers that support 

native ES Modules

, 

native ESM dynamic import

, and 

import.meta

. Legacy browsers can be supported via the official 

@vitejs/plugin-legacy

. See the 

Building for Production

 section for more details.

Trying Vite Online 

​

You can try Vite online on 

StackBlitz

. It runs the Vite-based build setup directly in the browser, so it is almost identical to the local setup but doesn't require installing anything on your machine. You can navigate to 

vite.new/{template}

 to select which framework to use.

The supported template presets are:

JavaScript

TypeScript

vanilla

vanilla-ts

vue

vue-ts

react

react-ts

preact

preact-ts

lit

lit-ts

svelte

svelte-ts

solid

solid-ts

qwik

qwik-ts

Scaffolding Your First Vite Project 

​

Compatibility Note

Vite requires 

Node.js

 version 18+ or 20+. However, some templates require a higher Node.js version to work, please upgrade if your package manager warns about it.

NPM

Yarn

PNPM

Bun

bash

$

 npm

 create

 vite@latest

bash

$

 yarn

 create

 vite

bash

$

 pnpm

 create

 vite

bash

$

 bun

 create

 vite

Then follow the prompts!

You can also directly specify the project name and the template you want to use via additional command line options. For example, to scaffold a Vite + Vue project, run:

bash

# npm 7+, extra double-dash is needed:




npm

 create

 vite@latest

 my-vue-app

 --

 --template

 vue







# yarn




yarn

 create

 vite

 my-vue-app

 --template

 vue







# pnpm




pnpm

 create

 vite

 my-vue-app

 --template

 vue







# bun




bun

 create

 vite

 my-vue-app

 --template

 vue

See 

create-vite

 for more details on each supported template: 

vanilla

, 

vanilla-ts

, 

vue

, 

vue-ts

, 

react

, 

react-ts

, 

react-swc

, 

react-swc-ts

, 

preact

, 

preact-ts

, 

lit

, 

lit-ts

, 

svelte

, 

svelte-ts

, 

solid

, 

solid-ts

, 

qwik

, 

qwik-ts

.

You can use 

.

 for the project name to scaffold in the current directory.

Community Templates 

​

create-vite is a tool to quickly start a project from a basic template for popular frameworks. Check out Awesome Vite for 

community maintained templates

 that include other tools or target different frameworks.

For a template at 

https://github.com/user/project

, you can try it out online using 

https://github.stackblitz.com/user/project

 (adding 

.stackblitz

 after 

github

 to the URL of the project).

You can also use a tool like 

degit

 to scaffold your project with one of the templates. Assuming the project is on GitHub and uses 

main

 as the default branch, you can create a local copy using:

bash

npx

 degit

 user/project#main

 my-project




cd

 my-project







npm

 install




npm

 run

 dev

Manual Installation 

​

In your project, you can install the 

vite

 CLI using:

NPM

Yarn

PNPM

Bun

bash

$

 npm

 install

 -D

 vite

bash

$

 yarn

 add

 -D

 vite

bash

$

 pnpm

 add

 -D

 vite

bash

$

 bun

 add

 -D

 vite

And create an 

index.html

 file like this:

html

<

p

>Hello Vite!</

p

>

Then run the 

vite

 CLI in your terminal:

bash

vite

The 

index.html

 will be served on 

http://localhost:5173

.

index.html

 and Project Root 

​

One thing you may have noticed is that in a Vite project, 

index.html

 is front-and-central instead of being tucked away inside 

public

. This is intentional: during development Vite is a server, and 

index.html

 is the entry point to your application.

Vite treats 

index.html

 as source code and part of the module graph. It resolves 

<script type="module" src="...">

 that references your JavaScript source code. Even inline 

<script type="module">

 and CSS referenced via 

<link href>

 also enjoy Vite-specific features. In addition, URLs inside 

index.html

 are automatically rebased so there's no need for special 

%PUBLIC_URL%

 placeholders.

Similar to static http servers, Vite has the concept of a "root directory" which your files are served from. You will see it referenced as 

<root>

 throughout the rest of the docs. Absolute URLs in your source code will be resolved using the project root as base, so you can write code as if you are working with a normal static file server (except way more powerful!). Vite is also capable of handling dependencies that resolve to out-of-root file system locations, which makes it usable even in a monorepo-based setup.

Vite also supports 

multi-page apps

 with multiple 

.html

 entry points.

Specifying Alternative Root 

​

Running 

vite

 starts the dev server using the current working directory as root. You can specify an alternative root with 

vite serve some/sub/dir

. Note that Vite will also resolve 

its config file (i.e. 

vite.config.js

)

 inside the project root, so you'll need to move it if the root is changed.

Command Line Interface 

​

In a project where Vite is installed, you can use the 

vite

 binary in your npm scripts, or run it directly with 

npx vite

. Here are the default npm scripts in a scaffolded Vite project:

json

{




  "scripts"

: {




    "dev"

: 

"vite"

, 

// start dev server, aliases: `vite dev`, `vite serve`




    "build"

: 

"vite build"

, 

// build for production




    "preview"

: 

"vite preview"

 // locally preview production build




  }




}

You can specify additional CLI options like 

--port

 or 

--open

. For a full list of CLI options, run 

npx vite --help

 in your project.

Learn more about the 

Command Line Interface

Using Unreleased Commits 

​

If you can't wait for a new release to test the latest features, you will need to clone the 

vite repo

 to your local machine and then build and link it yourself (

pnpm

 is required):

bash

git

 clone

 https://github.com/vitejs/vite.git




cd

 vite




pnpm

 install




cd

 packages/vite




pnpm

 run

 build




pnpm

 link

 --global

 # use your preferred package manager for this step

Then go to your Vite based project and run 

pnpm link --global vite

 (or the package manager that you used to link 

vite

 globally). Now restart the development server to ride on the bleeding edge!

Community 

​

If you have questions or need help, reach out to the community at 

Discord

 and 

GitHub Discussions

.

 Suggest changes to this page

Pager

Previous page

Why Vite

Next page

Features

Released under the MIT License. (61357f67)

Copyright © 2019-present Evan You & Vite Contributors










--- End of _docs.txt ---



--- Start of about_docs.txt ---

Documentation from https://react-dnd.github.io/react-dnd/about

React DnD

React 

DnD

Drag and Drop for React

Docs

Examples

GitHub

Topics

Overview

Tutorial

Testing

FAQ

Troubleshooting

Examples

Components

DndProvider

DragPreviewImage

Hooks

Overview

useDrag

useDrop

useDragLayer

useDragDropManager

Monitoring State

DragSourceMonitor

DropTargetMonitor

DragLayerMonitor

Backends

HTML5

Touch

Test

--- End of about_docs.txt ---



--- Start of dnd_docs.txt ---

Documentation from https://www.npmjs.com/package/@react-spectrum/dnd



















@react-spectrum/dnd - npm
















skip to:

content

package search

sign in

â¤

Pro

Teams

Pricing

Documentation

npm

Search

Sign Up

Sign In

 

@react-spectrum/dnd

3.3.10

Â â¢Â 

Public

Â â¢Â Published 

2 months ago

 Readme

Code 

Beta

4 Dependencies

3 Dependents

448 Versions

@react-spectrum/dnd




This package is part of 

react-spectrum

. See the repo for more details.




Readme

Keywords

none

Package Sidebar

Install

npm i 

@react-spectrum/dnd

Repository

Git

github.com/adobe/react-spectrum

Homepage

github.com/adobe/react-spectrum#readme

Downloads

Weekly Downloads

14,601

Version

3.3.10

License

Apache-2.0

Unpacked Size

55 kB

Total Files

17

Last publish

13 hours ago

Collaborators

Try

 on RunKit

Report

 malware

 

Footer

Support

Help

Advisories

Status

Contact npm

Company

About

Blog

Press

Terms & Policies

Policies

Terms of Use

Code of Conduct

Privacy
















--- End of dnd_docs.txt ---



--- Start of eslint-plugin-react-hooks_docs.txt ---

Documentation from https://www.npmjs.com/package/eslint-plugin-react-hooks



















eslint-plugin-react-hooks - npm
















skip to:

content

package search

sign in

â¤

Pro

Teams

Pricing

Documentation

npm

Search

Sign Up

Sign In

 

eslint-plugin-react-hooks

4.6.2

Â â¢Â 

Public

Â â¢Â Published 

2 months ago

 Readme

Code 

Beta

0 Dependencies

9,632 Dependents

1,691 Versions

eslint-plugin-react-hooks




This ESLint plugin enforces the 

Rules of Hooks

.




It is a part of the 

Hooks API

 for React.




Installation




Note: If you're using Create React App, please use 

react-scripts

 >= 3 instead of adding it directly.




Assuming you already have ESLint installed, run:




#

 npm


npm install eslint-plugin-react-hooks --save-dev



#

 yarn


yarn add eslint-plugin-react-hooks --dev




Then extend the recommended eslint config:




{


  

"extends"

: 

[


    

// ...


    

"plugin:react-hooks/recommended"


  

]




}




Custom Configuration




If you want more fine-grained configuration, you can instead add a snippet like this to your ESLint configuration file:




{


  

"plugins"

: 

[


    

// ...


    

"react-hooks"


  

]

,


  

"rules"

: 

{


    

// ...


    

"react-hooks/rules-of-hooks"

: 

"error"

,


    

"react-hooks/exhaustive-deps"

: 

"warn"


  

}




}




Advanced Configuration




exhaustive-deps

 can be configured to validate dependencies of custom Hooks with the 

additionalHooks

 option.
This option accepts a regex to match the names of custom Hooks that have dependencies.




{


  

"rules"

: 

{


    

// ...


    

"react-hooks/exhaustive-deps"

: 

[

"warn"

,

 

{


      

"additionalHooks"

: 

"(useMyCustomHook|useMyOtherCustomHook)"


    

}

]


  

}




}




We suggest to use this option 

very sparingly, if at all

. Generally saying, we recommend most custom Hooks to not use the dependencies argument, and instead provide a higher-level API that is more focused around a specific use case.




Valid and Invalid Examples




Please refer to the 

Rules of Hooks

 documentation and the 

Hooks FAQ

 to learn more about this rule.




License




MIT




Readme

Keywords

eslint

eslint-plugin

eslintplugin

react

Package Sidebar

Install

npm i 

eslint-plugin-react-hooks

Repository

Git

github.com/facebook/react

Homepage

reactjs.org/

Downloads

Weekly Downloads

14,370,178

Version

4.6.2

License

MIT

Unpacked Size

118 kB

Total Files

6

Last publish

6 hours ago

Collaborators

Try

 on RunKit

Report

 malware

 

Footer

Support

Help

Advisories

Status

Contact npm

Company

About

Blog

Press

Terms & Policies

Policies

Terms of Use

Code of Conduct

Privacy
















--- End of eslint-plugin-react-hooks_docs.txt ---



--- Start of eslint-plugin-react-refresh_docs.txt ---

Documentation from https://www.npmjs.com/package/eslint-plugin-react-refresh



















eslint-plugin-react-refresh - npm
















skip to:

content

package search

sign in

â¤

Pro

Teams

Pricing

Documentation

npm

Search

Sign Up

Sign In

 

eslint-plugin-react-refresh

0.4.8

Â â¢Â 

Public

Â â¢Â Published 

a day ago

 Readme

Code 

Beta

0 Dependencies

244 Dependents

18 Versions

eslint-plugin-react-refresh 







Validate that your components can safely be updated with fast refresh.




Limitations




â ï¸

 To avoid false positive, by default this plugin is only applied on 

tsx

 & 

jsx

 files. See options to run on JS files. 

â ï¸




The plugin rely on naming conventions (i.e. use PascalCase for components, camelCase for util functions). This is why there are some limitations:










export *

 are not supported and will be reported as an error




Anonymous function are not supported (i.e 

export default function() {}

)




Class components are not supported




All-uppercase function export is considered an error when not using direct named export (ex 

const CMS = () => <></>; export { CMS }

)







Installation




npm i -D eslint-plugin-react-refresh




Usage




{
  

"plugins"

: [

"

react-refresh

"

],
  

"rules"

: {
    

"react-refresh/only-export-components"

: 

"

warn

"


  }
}




Flat config




import

 

reactRefresh

 

from

 

"eslint-plugin-react-refresh"

;





export

 

default

 

[


  

{


    

// in main config for TSX/JSX source files


    

plugins

: 

{


      

"react-refresh"

: 

reactRefresh

,


    

}

,


    

rules

: 

{


      

"react-refresh/only-export-components"

: 

"warn"

,


    

}

,


  

}

,




]

;




Fail




export

 

const

 

foo

 

=

 

(

)

 

=>

 

{

}

;




export

 

const

 

Bar

 

=

 

(

)

 

=>

 

<

>

<

/

>

;




export

 

default

 

function

 

(

)

 

{

}




export

 

default

 

compose

(

)

(

MainComponent

)




export

 

*

 

from

 

"./foo"

;




const

 

Tab

 

=

 

(

)

 

=>

 

{

}

;




export

 

const

 

tabs

 

=

 

[

<

Tab

 

/

>

,

 

<

Tab

 

/

>

]

;




const

 

App

 

=

 

(

)

 

=>

 

{

}

;




createRoot

(

document

.

getElementById

(

"root"

)

)

.

render

(

<

App

 

/

>

)

;




Pass with allowConstantExport




export

 

const

 

CONSTANT

 

=

 

3

;




export

 

const

 

Foo

 

=

 

(

)

 

=>

 

<

>

<

/

>

;




Pass




export

 

default

 

function

 

Foo

(

)

 

{


  

return

 

<

>

<

/

>

;




}




const

 

foo

 

=

 

(

)

 

=>

 

{

}

;




export

 

const

 

Bar

 

=

 

(

)

 

=>

 

<

>

<

/

>

;




import

 

{

 

App

 

}

 

from

 

"./App"

;




createRoot

(

document

.

getElementById

(

"root"

)

)

.

render

(

<

App

 

/

>

)

;




Options




allowExportNames (v0.4.4)





If you use a framework that handles HMR of some specific exports, you can use this option to avoid warning for them.




Example for 

Remix

:




{
  

"react-refresh/only-export-components"

: [
    

"

warn

"

,
    { 

"allowExportNames"

: [

"

meta

"

, 

"

links

"

, 

"

headers

"

, 

"

loader

"

, 

"

action

"

] }
  ]
}




allowConstantExport (v0.4.0)





Don't warn when a constant (string, number, boolean, templateLiteral) is exported aside one or more components.




This should be enabled if the fast refresh implementation correctly handles this case (HMR when the constant doesn't change, propagate update to importers when the constant changes.). Vite supports it, PR welcome if you notice other integrations works well.




{
  

"react-refresh/only-export-components"

: [
    

"

warn

"

,
    { 

"allowConstantExport"

: 

true

 }
  ]
}




checkJS (v0.3.3)





If your using JSX inside 

.js

 files (which I don't recommend because it forces you to configure every tool you use to switch the parser), you can still use the plugin by enabling this option. To reduce the number of false positive, only files importing 

react

 are checked.




{
  

"react-refresh/only-export-components"

: [

"

warn

"

, { 

"checkJS"

: 

true

 }]
}




Readme

Keywords

eslint

eslint-plugin

react

react-refresh

fast refresh

Package Sidebar

Install

npm i 

eslint-plugin-react-refresh

Repository

Git

github.com/ArnaudBarre/eslint-plugin-react-refresh

Homepage

github.com/ArnaudBarre/eslint-plugin-react-refresh#readme

Downloads

Weekly Downloads

1,446,265

Version

0.4.8

License

MIT

Unpacked Size

13.8 kB

Total Files

4

Last publish

a day ago

Collaborators

Try

 on RunKit

Report

 malware

 

Footer

Support

Help

Advisories

Status

Contact npm

Company

About

Blog

Press

Terms & Policies

Policies

Terms of Use

Code of Conduct

Privacy
















--- End of eslint-plugin-react-refresh_docs.txt ---



--- Start of eslint-plugin-react_docs.txt ---

Documentation from https://www.npmjs.com/package/eslint-plugin-react



















eslint-plugin-react - npm
















skip to:

content

package search

sign in

â¤

Pro

Teams

Pricing

Documentation

npm

Search

Sign Up

Sign In

 

eslint-plugin-react

7.34.3

Â â¢Â 

Public

Â â¢Â Published 

22 days ago

 Readme

Code 

Beta

18 Dependencies

17,126 Dependents

204 Versions




eslint-plugin-react

 







===================
















React specific linting rules for 

eslint




Installation




npm install eslint eslint-plugin-react --save-dev




It is also possible to install ESLint globally rather than locally (using 

npm install -g eslint

). However, this is not recommended, and any plugins or shareable configs that you use must be installed locally in either case.




Configuration (legacy: 

.eslintrc*

) 







Use 

our preset

 to get reasonable defaults:




  

"extends"

: [
    

"

eslint:recommended

"

,
    

"

plugin:react/recommended

"


  ]




If you are using the 

new JSX transform from React 17

, extend 

react/jsx-runtime

 in your eslint config (add 

"plugin:react/jsx-runtime"

 to 

"extends"

) to disable the relevant rules.




You should also specify settings that will be shared across all the plugin rules. (

More about eslint shared settings

)




{


  

"settings"

: 

{


    

"react"

: 

{


      

"createClass"

: 

"createReactClass"

,

 

// Regex for Component Factory to use,


                                         

// default to "createReactClass"


      

"pragma"

: 

"React"

,

  

// Pragma to use, default to "React"


      

"fragment"

: 

"Fragment"

,

  

// Fragment to use (may be a property of <pragma>), default to "Fragment"


      

"version"

: 

"detect"

,

 

// React version. "detect" automatically picks the version you have installed.


                           

// You can also use `16.0`, `16.3`, etc, if you want to override the detected value.


                           

// It will default to "latest" and warn if missing, and to "detect" in the future


      

"flowVersion"

: 

"0.53"

 

// Flow version


    

}

,


    

"propWrapperFunctions"

: 

[


        

// The names of any function used to wrap propTypes, e.g. `forbidExtraProps`. If this isn't set, any propTypes wrapped in a function will be skipped.


        

"forbidExtraProps"

,


        

{

"property"

: 

"freeze"

,

 

"object"

: 

"Object"

}

,


        

{

"property"

: 

"myFavoriteWrapper"

}

,


        

// for rules that check exact prop wrappers


        

{

"property"

: 

"forbidExtraProps"

,

 

"exact"

: 

true

}


    

]

,


    

"componentWrapperFunctions"

: 

[


        

// The name of any function used to wrap components, e.g. Mobx `observer` function. If this isn't set, components wrapped by these functions will be skipped.


        

"observer"

,

 

// `property`


        

{

"property"

: 

"styled"

}

,

 

// `object` is optional


        

{

"property"

: 

"observer"

,

 

"object"

: 

"Mobx"

}

,


        

{

"property"

: 

"observer"

,

 

"object"

: 

"<pragma>"

}

 

// sets `object` to whatever value `settings.react.pragma` is set to


    

]

,


    

"formComponents"

: 

[


      

// Components used as alternatives to <form> for forms, eg. <Form endpoint={ url } />


      

"CustomForm"

,


      

{

"name"

: 

"SimpleForm"

,

 

"formAttribute"

: 

"endpoint"

}

,


      

{

"name"

: 

"Form"

,

 

"formAttribute"

: 

[

"registerEndpoint"

,

 

"loginEndpoint"

]

}

,

 

// allows specifying multiple properties if necessary


    

]

,


    

"linkComponents"

: 

[


      

// Components used as alternatives to <a> for linking, eg. <Link to={ url } />


      

"Hyperlink"

,


      

{

"name"

: 

"MyLink"

,

 

"linkAttribute"

: 

"to"

}

,


      

{

"name"

: 

"Link"

,

 

"linkAttribute"

: 

[

"to"

,

 

"href"

]

}

,

 

// allows specifying multiple properties if necessary


    

]


  

}




}




If you do not use a preset you will need to specify individual rules and add extra configuration.




Add "react" to the plugins section.




{
  

"plugins"

: [
    

"

react

"


  ]
}




Enable JSX support.




With 

eslint

 2+




{
  

"parserOptions"

: {
    

"ecmaFeatures"

: {
      

"jsx"

: 

true


    }
  }
}




Enable the rules that you would like to use.




  

"rules"

: {
    

"react/jsx-uses-react"

: 

"

error

"

,
    

"react/jsx-uses-vars"

: 

"

error

"

,
  }




Shareable configs




Recommended




This plugin exports a 

recommended

 configuration that enforces React good practices.




To enable this configuration use the 

extends

 property in your 

.eslintrc

 config file:




{
  

"extends"

: [

"

eslint:recommended

"

, 

"

plugin:react/recommended

"

]
}




See 

eslint

 documentation

 for more information about extending configuration files.




All




This plugin also exports an 

all

 configuration that includes every available rule.
This pairs well with the 

eslint:all

 rule.




{
  

"plugins"

: [
    

"

react

"


  ],
  

"extends"

: [

"

eslint:all

"

, 

"

plugin:react/all

"

]
}




Note

: These configurations will import 

eslint-plugin-react

 and enable JSX in 

parser options

.




Configuration (new: 

eslint.config.js

)




From 

v8.21.0

, eslint announced a new config system.
In the new system, 

.eslintrc*

 is no longer used. 

eslint.config.js

 would be the default config file name.
In eslint 

v8

, the legacy system (

.eslintrc*

) would still be supported, while in eslint 

v9

, only the new system would be supported.




And from 

v8.23.0

, eslint CLI starts to look up 

eslint.config.js

.


So, if your eslint is 

>=8.23.0

, you're 100% ready to use the new config system.




You might want to check out the official blog posts,







https://eslint.org/blog/2022/08/new-config-system-part-1/




https://eslint.org/blog/2022/08/new-config-system-part-2/




https://eslint.org/blog/2022/08/new-config-system-part-3/







and the 

official docs

.




Plugin




The default export of 

eslint-plugin-react

 is a plugin object.




const

 

react

 

=

 

require

(

'eslint-plugin-react'

)

;




const

 

globals

 

=

 

require

(

'globals'

)

;





module

.

exports

 

=

 

[


  

â¦


  

{


    

files

: 

[

'**/*.{js,jsx,mjs,cjs,ts,tsx}'

]

,


    

plugins

: 

{


      react

,


    

}

,


    

languageOptions

: 

{


      

parserOptions

: 

{


        

ecmaFeatures

: 

{


          

jsx

: 

true

,


        

}

,


      

}

,


      

globals

: 

{


        ...

globals

.

browser

,


      

}

,


    

}

,


    

rules

: 

{


      

// ... any rules you want


      

'react/jsx-uses-react'

: 

'error'

,


      

'react/jsx-uses-vars'

: 

'error'

,


     

}

,


    

// ... others are omitted for brevity


  

}

,


  

â¦




]

;




Configuring shared settings




Refer to the 

official docs

.




The schema of the 

settings.react

 object would be identical to that of what's already described above in the legacy config section.




Shareable configs




There're also 3 shareable configs.







eslint-plugin-react/configs/all




eslint-plugin-react/configs/recommended




eslint-plugin-react/configs/jsx-runtime







If your eslint.config.js is ESM, include the 

.js

 extension (e.g. 

eslint-plugin-react/recommended.js

). Note that the next semver-major will require omitting the extension for these imports.




Note

: These configurations will import 

eslint-plugin-react

 and enable JSX in 

languageOptions.parserOptions

.




In the new config system, 

plugin:

 protocol(e.g. 

plugin:react/recommended

) is no longer valid.
As eslint does not automatically import the preset config (shareable config), you explicitly do it by yourself.




const

 

reactRecommended

 

=

 

require

(

'eslint-plugin-react/configs/recommended'

)

;





module

.

exports

 

=

 

[


  

â¦


  

reactRecommended

,

 

// This is not a plugin object, but a shareable config object


  

â¦




]

;




You can of course add/override some properties.




Note

: Our shareable configs does not preconfigure 

files

 or 

languageOptions.globals

.
For most of the cases, you probably want to configure some properties by yourself.




const

 

reactRecommended

 

=

 

require

(

'eslint-plugin-react/configs/recommended'

)

;




const

 

globals

 

=

 

require

(

'globals'

)

;





module

.

exports

 

=

 

[


  

â¦


  

{


    

files

: 

[

'**/*.{js,mjs,cjs,jsx,mjsx,ts,tsx,mtsx}'

]

,


    ...

reactRecommended

,


    

languageOptions

: 

{


      ...

reactRecommended

.

languageOptions

,


      

globals

: 

{


        ...

globals

.

serviceworker

,


        ...

globals

.

browser

,


      

}

,


    

}

,


  

}

,


  

â¦




]

;




The above example is same as the example below, as the new config system is based on chaining.




const

 

reactRecommended

 

=

 

require

(

'eslint-plugin-react/configs/recommended'

)

;




const

 

globals

 

=

 

require

(

'globals'

)

;





module

.

exports

 

=

 

[


  

â¦


  

{


    

files

: 

[

'**/*.{js,mjs,cjs,jsx,mjsx,ts,tsx,mtsx}'

]

,


    ...

reactRecommended

,


  

}

,


  

{


    

files

: 

[

'**/*.{js,mjs,cjs,jsx,mjsx,ts,tsx,mtsx}'

]

,


    

languageOptions

: 

{


      

globals

: 

{


        ...

globals

.

serviceworker

,


        ...

globals

.

browser

,


      

}

,


    

}

,


  

}

,


  

â¦




]

;




List of supported rules




ð¼ 

Configurations

 enabled in.


ð« 

Configurations

 disabled in.


ð Set in the 

jsx-runtime

 

configuration

.


âï¸ Set in the 

recommended

 

configuration

.


ð§ Automatically fixable by the 

--fix

 CLI option

.


ð¡ Manually fixable by 

editor suggestions

.


â Deprecated.













NameÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â 




Description




ð¼




ð«




ð§




ð¡




â
















boolean-prop-naming




Enforces consistent naming for boolean props

























button-has-type




Disallow usage of 

button

 elements without an explicit 

type

 attribute

























checked-requires-onchange-or-readonly




Enforce using 

onChange

 or 

readonly

 attribute when 

checked

 is used

























default-props-match-prop-types




Enforce all defaultProps have a corresponding non-required PropType

























destructuring-assignment




Enforce consistent usage of destructuring assignment of props, state, and context










ð§
















display-name




Disallow missing displayName in a React component definition




âï¸






















forbid-component-props




Disallow certain props on components

























forbid-dom-props




Disallow certain props on DOM Nodes

























forbid-elements




Disallow certain elements

























forbid-foreign-prop-types




Disallow using another component's propTypes

























forbid-prop-types




Disallow certain propTypes

























function-component-definition




Enforce a specific function type for function components










ð§
















hook-use-state




Ensure destructuring and symmetric naming of useState hook value and setter variables













ð¡













iframe-missing-sandbox




Enforce sandbox attribute on iframe elements

























jsx-boolean-value




Enforce boolean attributes notation in JSX










ð§
















jsx-child-element-spacing




Enforce or disallow spaces inside of curly braces in JSX attributes and expressions

























jsx-closing-bracket-location




Enforce closing bracket location in JSX










ð§
















jsx-closing-tag-location




Enforce closing tag location for multiline JSX










ð§
















jsx-curly-brace-presence




Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes










ð§
















jsx-curly-newline




Enforce consistent linebreaks in curly braces in JSX attributes and expressions










ð§
















jsx-curly-spacing




Enforce or disallow spaces inside of curly braces in JSX attributes and expressions










ð§
















jsx-equals-spacing




Enforce or disallow spaces around equal signs in JSX attributes










ð§
















jsx-filename-extension




Disallow file extensions that may contain JSX

























jsx-first-prop-new-line




Enforce proper position of the first property in JSX










ð§
















jsx-fragments




Enforce shorthand or standard form for React fragments










ð§
















jsx-handler-names




Enforce event handler naming conventions in JSX

























jsx-indent




Enforce JSX indentation










ð§
















jsx-indent-props




Enforce props indentation in JSX










ð§
















jsx-key




Disallow missing 

key

 props in iterators/collection literals




âï¸






















jsx-max-depth




Enforce JSX maximum depth

























jsx-max-props-per-line




Enforce maximum of props on a single line in JSX










ð§
















jsx-newline




Require or prevent a new line after jsx elements and expressions.










ð§
















jsx-no-bind




Disallow 

.bind()

 or arrow functions in JSX props

























jsx-no-comment-textnodes




Disallow comments from being inserted as text nodes




âï¸






















jsx-no-constructed-context-values




Disallows JSX context provider values from taking values that will cause needless rerenders

























jsx-no-duplicate-props




Disallow duplicate properties in JSX




âï¸






















jsx-no-leaked-render




Disallow problematic leaked values from being rendered










ð§
















jsx-no-literals




Disallow usage of string literals in JSX

























jsx-no-script-url




Disallow usage of 

javascript:

 URLs

























jsx-no-target-blank




Disallow 

target="_blank"

 attribute without 

rel="noreferrer"







âï¸







ð§
















jsx-no-undef




Disallow undeclared variables in JSX




âï¸






















jsx-no-useless-fragment




Disallow unnecessary fragments










ð§
















jsx-one-expression-per-line




Require one JSX element per line










ð§
















jsx-pascal-case




Enforce PascalCase for user-defined JSX components

























jsx-props-no-multi-spaces




Disallow multiple spaces between inline JSX props










ð§
















jsx-props-no-spreading




Disallow JSX prop spreading

























jsx-sort-default-props




Enforce defaultProps declarations alphabetical sorting
















â










jsx-sort-props




Enforce props alphabetical sorting










ð§
















jsx-space-before-closing




Enforce spacing before closing bracket in JSX










ð§







â










jsx-tag-spacing




Enforce whitespace in and around the JSX opening and closing brackets










ð§
















jsx-uses-react




Disallow React to be incorrectly marked as unused




âï¸




ð



















jsx-uses-vars




Disallow variables used in JSX to be incorrectly marked as unused




âï¸






















jsx-wrap-multilines




Disallow missing parentheses around multiline JSX










ð§
















no-access-state-in-setstate




Disallow when this.state is accessed within setState

























no-adjacent-inline-elements




Disallow adjacent inline elements not separated by whitespace.

























no-array-index-key




Disallow usage of Array index in keys

























no-arrow-function-lifecycle




Lifecycle methods should be methods on the prototype, not class fields










ð§
















no-children-prop




Disallow passing of children as props




âï¸






















no-danger




Disallow usage of dangerous JSX properties

























no-danger-with-children




Disallow when a DOM element is using both children and dangerouslySetInnerHTML




âï¸






















no-deprecated




Disallow usage of deprecated methods




âï¸






















no-did-mount-set-state




Disallow usage of setState in componentDidMount

























no-did-update-set-state




Disallow usage of setState in componentDidUpdate

























no-direct-mutation-state




Disallow direct mutation of this.state




âï¸






















no-find-dom-node




Disallow usage of findDOMNode




âï¸






















no-invalid-html-attribute




Disallow usage of invalid attributes













ð¡













no-is-mounted




Disallow usage of isMounted




âï¸






















no-multi-comp




Disallow multiple component definition per file

























no-namespace




Enforce that namespaces are not used in React elements

























no-object-type-as-default-prop




Disallow usage of referential-type variables as default param in functional component

























no-redundant-should-component-update




Disallow usage of shouldComponentUpdate when extending React.PureComponent

























no-render-return-value




Disallow usage of the return value of ReactDOM.render




âï¸






















no-set-state




Disallow usage of setState

























no-string-refs




Disallow using string references




âï¸






















no-this-in-sfc




Disallow 

this

 from being used in stateless functional components

























no-typos




Disallow common typos

























no-unescaped-entities




Disallow unescaped HTML entities from appearing in markup




âï¸






















no-unknown-property




Disallow usage of unknown DOM property




âï¸







ð§
















no-unsafe




Disallow usage of unsafe lifecycle methods







âï¸



















no-unstable-nested-components




Disallow creating unstable components inside components

























no-unused-class-component-methods




Disallow declaring unused methods of component class

























no-unused-prop-types




Disallow definitions of unused propTypes

























no-unused-state




Disallow definitions of unused state

























no-will-update-set-state




Disallow usage of setState in componentWillUpdate

























prefer-es6-class




Enforce ES5 or ES6 class for React Components

























prefer-exact-props




Prefer exact proptype definitions

























prefer-read-only-props




Enforce that props are read-only










ð§
















prefer-stateless-function




Enforce stateless components to be written as a pure function

























prop-types




Disallow missing props validation in a React component definition




âï¸






















react-in-jsx-scope




Disallow missing React when using JSX




âï¸




ð



















require-default-props




Enforce a defaultProps definition for every prop that is not a required prop

























require-optimization




Enforce React components to have a shouldComponentUpdate method

























require-render-return




Enforce ES5 or ES6 class for returning value in render function




âï¸






















self-closing-comp




Disallow extra closing tags for components without children










ð§
















sort-comp




Enforce component methods order

























sort-default-props




Enforce defaultProps declarations alphabetical sorting

























sort-prop-types




Enforce propTypes declarations alphabetical sorting










ð§
















state-in-constructor




Enforce class component state initialization style

























static-property-placement




Enforces where React component static properties should be positioned.

























style-prop-object




Enforce style prop value is an object

























void-dom-elements-no-children




Disallow void DOM elements (e.g. 

<img />

, 

<br />

) from receiving children




























Other useful plugins







Rules of Hooks: 

eslint-plugin-react-hooks







JSX accessibility: 

eslint-plugin-jsx-a11y







React Native: 

eslint-plugin-react-native










License




eslint-plugin-react

 is licensed under the 

MIT License

.




Readme

Keywords

eslint

eslint-plugin

eslintplugin

react

Package Sidebar

Install

npm i 

eslint-plugin-react

Repository

Git

github.com/jsx-eslint/eslint-plugin-react

Homepage

github.com/jsx-eslint/eslint-plugin-react

Downloads

Weekly Downloads

17,058,206

Version

7.34.3

License

MIT

Unpacked Size

821 kB

Total Files

138

Last publish

22 days ago

Collaborators

Try

 on RunKit

Report

 malware

 

Footer

Support

Help

Advisories

Status

Contact npm

Company

About

Blog

Press

Terms & Policies

Policies

Terms of Use

Code of Conduct

Privacy
















--- End of eslint-plugin-react_docs.txt ---



--- Start of eslint_docs.txt ---

Documentation from https://www.npmjs.com/package/eslint



















eslint - npm
















skip to:

content

package search

sign in

â¤

Pro

Teams

Pricing

Documentation

npm

Search

Sign Up

Sign In

 

eslint

9.6.0

Â â¢Â 

Public

Â â¢Â Published 

12 days ago

 Readme

Code 

Beta

34 Dependencies

24,232 Dependents

361 Versions

























ESLint




Website

 |


Configure ESLint

 |


Rules

 |


Contribute to ESLint

 |


Report Bugs

 |


Code of Conduct

 |


Twitter

 |


Discord

 |


Mastodon




ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code. In many ways, it is similar to JSLint and JSHint with a few exceptions:







ESLint uses 

Espree

 for JavaScript parsing.




ESLint uses an AST to evaluate patterns in code.




ESLint is completely pluggable, every single rule is a plugin and you can add more at runtime.







Table of Contents







Installation and Usage




Configuration




Code of Conduct




Filing Issues




Frequently Asked Questions




Releases




Security Policy




Semantic Versioning Policy




Stylistic Rule Updates




License




Team




Sponsors




Technology Sponsors







Installation and Usage




Prerequisites: 

Node.js

 (

^18.18.0

, 

^20.9.0

, or 

>=21.1.0

) built with SSL support. (If you are using an official Node.js distribution, SSL is always built in.)




You can install and configure ESLint using this command:




npm init @eslint/config@latest




After that, you can run ESLint on any file or directory like this:




./node_modules/.bin/eslint yourfile.js




Configuration




After running 

npm init @eslint/config

, you'll have an 

eslint.config.js

 (or 

eslint.config.mjs

) file in your directory. In it, you'll see some rules configured like this:




import

 

pluginJs

 

from

 

"@eslint/js"

;




export

 

default

 

[

 

pluginJs

.

configs

.

recommended

,

 

]

;




The names 

"semi"

 and 

"quotes"

 are the names of 

rules

 in ESLint. The first value is the error level of the rule and can be one of these values:










"off"

 or 

0

 - turn the rule off







"warn"

 or 

1

 - turn the rule on as a warning (doesn't affect exit code)







"error"

 or 

2

 - turn the rule on as an error (exit code will be 1)







The three error levels allow you fine-grained control over how ESLint applies rules (for more configuration options and details, see the 

configuration docs

).




Code of Conduct




ESLint adheres to the 

JS Foundation Code of Conduct

.




Filing Issues




Before filing an issue, please be sure to read the guidelines for what you're reporting:







Bug Report




Propose a New Rule




Proposing a Rule Change




Request a Change







Frequently Asked Questions




I'm using JSCS, should I migrate to ESLint?




Yes. 

JSCS has reached end of life

 and is no longer supported.




We have prepared a 

migration guide

 to help you convert your JSCS settings to an ESLint configuration.




We are now at or near 100% compatibility with JSCS. If you try ESLint and believe we are not yet compatible with a JSCS rule/configuration, please create an issue (mentioning that it is a JSCS compatibility issue) and we will evaluate it as per our normal process.




Does Prettier replace ESLint?




No, ESLint and Prettier have different jobs: ESLint is a linter (looking for problematic patterns) and Prettier is a code formatter. Using both tools is common, refer to 

Prettier's documentation

 to learn how to configure them to work well with each other.




Why can't ESLint find my plugins?







Make sure your plugins (and ESLint) are both in your project's 

package.json

 as devDependencies (or dependencies, if your project uses ESLint at runtime).




Make sure you have run 

npm install

 and all your dependencies are installed.




Make sure your plugins' peerDependencies have been installed as well. You can use 

npm view eslint-plugin-myplugin peerDependencies

 to see what peer dependencies 

eslint-plugin-myplugin

 has.







Does ESLint support JSX?




Yes, ESLint natively supports parsing JSX syntax (this must be enabled in 

configuration

). Please note that supporting JSX syntax 

is not

 the same as supporting React. React applies specific semantics to JSX syntax that ESLint doesn't recognize. We recommend using 

eslint-plugin-react

 if you are using React and want React semantics.




What ECMAScript versions does ESLint support?




ESLint has full support for ECMAScript 3, 5, and every year from 2015 up until the most recent stage 4 specification (the default). You can set your desired ECMAScript syntax and other settings (like global variables) through 

configuration

.




What about experimental features?




ESLint's parser only officially supports the latest final ECMAScript standard. We will make changes to core rules in order to avoid crashes on stage 3 ECMAScript syntax proposals (as long as they are implemented using the correct experimental ESTree syntax). We may make changes to core rules to better work with language extensions (such as JSX, Flow, and TypeScript) on a case-by-case basis.




In other cases (including if rules need to warn on more or fewer cases due to new syntax, rather than just not crashing), we recommend you use other parsers and/or rule plugins. If you are using Babel, you can use 

@babel/eslint-parser

 and 

@babel/eslint-plugin

 to use any option available in Babel.




Once a language feature has been adopted into the ECMAScript standard (stage 4 according to the 

TC39 process

), we will accept issues and pull requests related to the new feature, subject to our 

contributing guidelines

. Until then, please use the appropriate parser and plugin(s) for your experimental feature.




Which Node.js versions does ESLint support?




ESLint updates the supported Node.js versions with each major release of ESLint. At that time, ESLint's supported Node.js versions are updated to be:







The most recent maintenance release of Node.js




The lowest minor version of the Node.js LTS release that includes the features the ESLint team wants to use.




The Node.js Current release







ESLint is also expected to work with Node.js versions released after the Node.js Current release.




Refer to the 

Quick Start Guide

 for the officially supported Node.js versions for a given ESLint release.




Where to ask for help?




Open a 

discussion

 or stop by our 

Discord server

.




Why doesn't ESLint lock dependency versions?




Lock files like 

package-lock.json

 are helpful for deployed applications. They ensure that dependencies are consistent between environments and across deployments.




Packages like 

eslint

 that get published to the npm registry do not include lock files. 

npm install eslint

 as a user will respect version constraints in ESLint's 

package.json

. ESLint and its dependencies will be included in the user's lock file if one exists, but ESLint's own lock file would not be used.




We intentionally don't lock dependency versions so that we have the latest compatible dependency versions in development and CI that our users get when installing ESLint in a project.




The Twilio blog has a 

deeper dive

 to learn more.




Releases




We have scheduled releases every two weeks on Friday or Saturday. You can follow a 

release issue

 for updates about the scheduling of any particular release.




Security Policy




ESLint takes security seriously. We work hard to ensure that ESLint is safe for everyone and that security issues are addressed quickly and responsibly. Read the full 

security policy

.




Semantic Versioning Policy




ESLint follows 

semantic versioning

. However, due to the nature of ESLint as a code quality tool, it's not always clear when a minor or major version bump occurs. To help clarify this for everyone, we've defined the following semantic versioning policy for ESLint:







Patch release (intended to not break your lint build)





A bug fix in a rule that results in ESLint reporting fewer linting errors.




A bug fix to the CLI or core (including formatters).




Improvements to documentation.




Non-user-facing changes such as refactoring code, adding, deleting, or modifying tests, and increasing test coverage.




Re-releasing after a failed release (i.e., publishing a release that doesn't work for anyone).










Minor release (might break your lint build)





A bug fix in a rule that results in ESLint reporting more linting errors.




A new rule is created.




A new option to an existing rule that does not result in ESLint reporting more linting errors by default.




A new addition to an existing rule to support a newly-added language feature (within the last 12 months) that will result in ESLint reporting more linting errors by default.




An existing rule is deprecated.




A new CLI capability is created.




New capabilities to the public API are added (new classes, new methods, new arguments to existing methods, etc.).




A new formatter is created.







eslint:recommended

 is updated and will result in strictly fewer linting errors (e.g., rule removals).










Major release (likely to break your lint build)








eslint:recommended

 is updated and may result in new linting errors (e.g., rule additions, most rule option updates).




A new option to an existing rule that results in ESLint reporting more linting errors by default.




An existing formatter is removed.




Part of the public API is removed or changed in an incompatible way. The public API includes:





Rule schemas




Configuration schema




Command-line options




Node.js API




Rule, formatter, parser, plugin APIs



















According to our policy, any minor update may report more linting errors than the previous release (ex: from a bug fix). As such, we recommend using the tilde (

~

) in 

package.json

 e.g. 

"eslint": "~3.1.0"

 to guarantee the results of your builds.




Stylistic Rule Updates




Stylistic rules are frozen according to 

our policy

 on how we evaluate new rules and rule changes.
This means:










Bug fixes

: We will still fix bugs in stylistic rules.







New ECMAScript features

: We will also make sure stylistic rules are compatible with new ECMAScript features.







New options

: We will 

not

 add any new options to stylistic rules unless an option is the only way to fix a bug or support a newly-added ECMAScript feature.







License







Team




These folks keep the project moving and are resources for help.




Technical Steering Committee (TSC)




The people who manage releases, review feature requests, and meet regularly to ensure ESLint is properly maintained.














Nicholas C. Zakas















Francesco Trotta















Milos Djermanovic











Reviewers




The people who review and implement new features.














å¯ç¶















Nitin Kumar











Committers




The people who review and fix bugs and help triage issues.














Josh Goldberg â¨















Tanuj Kanti











Website Team




Team members who focus specifically on eslint.org














Amaresh  S M















Strek















Percy Ma











Sponsors




The following companies, organizations, and individuals support ESLint's ongoing maintenance and development. 

Become a Sponsor

 to get your logo on our README and website.




Platinum Sponsors




 

Gold Sponsors




 

Silver Sponsors




 

 

 

Bronze Sponsors




 

 

 

 

 

 

 




Technology Sponsors







Site search (

eslint.org

) is sponsored by 

Algolia







Hosting for (

eslint.org

) is sponsored by 

Netlify







Password management is sponsored by 

1Password










Readme

Keywords

ast

lint

javascript

ecmascript

espree

Package Sidebar

Install

npm i 

eslint

Repository

Git

github.com/eslint/eslint

Homepage

eslint.org

Fund

 this package

Downloads

Weekly Downloads

35,350,095

Version

9.6.0

License

MIT

Unpacked Size

3.07 MB

Total Files

403

Last publish

12 days ago

Collaborators

Try

 on RunKit

Report

 malware

 

Footer

Support

Help

Advisories

Status

Contact npm

Company

About

Blog

Press

Terms & Policies

Policies

Terms of Use

Code of Conduct

Privacy
















--- End of eslint_docs.txt ---



--- Start of getting-started.html_docs.txt ---

Documentation from https://reactjs.org/docs/getting-started.html

Getting Started – React

We want to hear from you!

Take our 2021 Community Survey!

This site is no longer updated.

Go to react.dev

React

Docs

Tutorial

Blog

Community

v

18.2.0

 

Languages

GitHub

Getting Started







These docs are old and won’t be updated. Go to 

react.dev

 for the new React docs.




The new 

Quick Start

 teaches modern React and includes live examples.










This page is an overview of the React documentation and related resources.




React

 is a JavaScript library for building user interfaces. Learn what React is all about on 

our homepage

 or 

in the tutorial

.










Try React




Learn React




Staying Informed




Versioned Documentation




Something Missing?







Try React 




React has been designed from the start for gradual adoption, and 

you can use as little or as much React as you need.

 Whether you want to get a taste of React, add some interactivity to a simple HTML page, or start a complex React-powered app, the links in this section will help you get started.




Online Playgrounds 




If you’re interested in playing around with React, you can use an online code playground. Try a Hello World template on 

CodePen

, 

CodeSandbox

, or 

Stackblitz

.




If you prefer to use your own text editor, you can also 

download this HTML file

, edit it, and open it from the local filesystem in your browser. It does a slow runtime code transformation, so we’d only recommend using this for simple demos.




Add React to a Website 




You can 

add React to an HTML page in one minute

. You can then either gradually expand its presence, or keep it contained to a few dynamic widgets.




Create a New React App 




When starting a React project, a 

simple HTML page with script tags

 might still be the best option. It only takes a minute to set up!




As your application grows, you might want to consider a more integrated setup. There are several JavaScript toolchains we recommend for larger applications. Each of them can work with little to no configuration and lets you take full advantage of the rich React ecosystem. 

Learn how.




Learn React 




People come to React from different backgrounds and with different learning styles. Whether you prefer a more theoretical or a practical approach, we hope you’ll find this section helpful.







If you prefer to 

learn by doing

, start with our 

practical tutorial

.




If you prefer to 

learn concepts step by step

, start with our 

guide to main concepts

.







Like any unfamiliar technology, React does have a learning curve. With practice and some patience, you 

will

 get the hang of it.




First Examples 




The 

React homepage

 contains a few small React examples with a live editor. Even if you don’t know anything about React yet, try changing their code and see how it affects the result.




React for Beginners 




If you feel that the React documentation goes at a faster pace than you’re comfortable with, check out 

this overview of React by Tania Rascia

. It introduces the most important React concepts in a detailed, beginner-friendly way. Once you’re done, give the documentation another try!




React for Designers 




If you’re coming from a design background, 

these resources

 are a great place to get started.




JavaScript Resources 




The React documentation assumes some familiarity with programming in the JavaScript language. You don’t have to be an expert, but it’s harder to learn both React and JavaScript at the same time.




We recommend going through 

this JavaScript overview

 to check your knowledge level. It will take you between 30 minutes and an hour but you will feel more confident learning React.







Tip




Whenever you get confused by something in JavaScript, 

MDN

 and 

javascript.info

 are great websites to check. There are also 

community support forums

 where you can ask for help.







Practical Tutorial 




If you prefer to 

learn by doing,

 check out our 

practical tutorial

. In this tutorial, we build a tic-tac-toe game in React. You might be tempted to skip it because you’re not into building games — but give it a chance. The techniques you’ll learn in the tutorial are fundamental to building 

any

 React apps, and mastering it will give you a much deeper understanding.




Step-by-Step Guide 




If you prefer to 

learn concepts step by step,

 our 

guide to main concepts

 is the best place to start. Every next chapter in it builds on the knowledge introduced in the previous chapters so you won’t miss anything as you go along.




Thinking in React 




Many React users credit reading 

Thinking in React

 as the moment React finally “clicked” for them. It’s probably the oldest React walkthrough but it’s still just as relevant.




Recommended Courses 




Sometimes people find third-party books and video courses more helpful than the official documentation. We maintain 

a list of commonly recommended resources

, some of which are free.




Advanced Concepts 




Once you’re comfortable with the 

main concepts

 and played with React a little bit, you might be interested in more advanced topics. This section will introduce you to the powerful, but less commonly used React features like 

context

 and 

refs

.




API Reference 




This documentation section is useful when you want to learn more details about a particular React API. For example, 

React.Component

 API reference

 can provide you with details on how 

setState()

 works, and what different lifecycle methods are useful for.




Glossary and FAQ 




The 

glossary

 contains an overview of the most common terms you’ll see in the React documentation. There is also a FAQ section dedicated to short questions and answers about common topics, including 

making AJAX requests

, 

component state

, and 

file structure

.




Staying Informed 




The 

React blog

 is the official source for the updates from the React team. Anything important, including release notes or deprecation notices, will be posted there first.




You can also follow the 

@reactjs account

 on Twitter, but you won’t miss anything essential if you only read the blog.




Not every React release deserves its own blog post, but you can find a detailed changelog for every release in the 

CHANGELOG.md

 file in the React repository

, as well as on the 

Releases

 page.




Versioned Documentation 




This documentation always reflects the latest stable version of React. Since React 16, you can find older versions of the documentation on a 

separate page

. Note that documentation for past versions is snapshotted at the time of the release, and isn’t being continuously updated.




Something Missing? 




If something is missing in the documentation or if you found some part confusing, please 

file an issue for the documentation repository

 with your suggestions for improvement, or tweet at the 

@reactjs account

. We love hearing from you!

Is this page useful?

Edit this page

Installation

Getting Started

Add React to a Website

Create a New React App

CDN Links

Release Channels

Main Concepts

1. Hello World

2. Introducing JSX

3. Rendering Elements

4. Components and Props

5. State and Lifecycle

6. Handling Events

7. Conditional Rendering

8. Lists and Keys

9. Forms

10. Lifting State Up

11. Composition vs Inheritance

12. Thinking In React

Advanced Guides

Accessibility

Code-Splitting

Context

Error Boundaries

Forwarding Refs

Fragments

Higher-Order Components

Integrating with Other Libraries

JSX In Depth

Optimizing Performance

Portals

Profiler

React Without ES6

React Without JSX

Reconciliation

Refs and the DOM

Render Props

Static Type Checking

Strict Mode

Typechecking With PropTypes

Uncontrolled Components

Web Components

API Reference

React

React.Component

ReactDOM

ReactDOMClient

ReactDOMServer

DOM Elements

SyntheticEvent

Test Utilities

Test Renderer

JS Environment Requirements

Glossary

Hooks

1. Introducing Hooks

2. Hooks at a Glance

3. Using the State Hook

4. Using the Effect Hook

5. Rules of Hooks

6. Building Your Own Hooks

7. Hooks API Reference

8. Hooks FAQ

Testing

Testing Overview

Testing Recipes

Testing Environments

Contributing

How to Contribute

Codebase Overview

Implementation Notes

Design Principles

FAQ

AJAX and APIs

Babel, JSX, and Build Steps

Passing Functions to Components

Component State

Styling and CSS

File Structure

Versioning Policy

Virtual DOM and Internals

Next article

Add React to a Website

Docs

Installation

Main Concepts

Advanced Guides

API Reference

Hooks

Testing

Contributing

FAQ

Channels

GitHub

Stack Overflow

Discussion Forums

Reactiflux Chat

DEV Community

Facebook

Twitter

Community

Code of Conduct

Community Resources

More

Tutorial

Blog

Acknowledgements

React Native

Privacy

Terms

Copyright © 2024 Meta Platforms, Inc.

--- End of getting-started.html_docs.txt ---



--- Start of main_docs.txt ---

Documentation from https://reactrouter.com/en/main

Home v6.24.1 | React Router

main

Branches

main (6.24.1)

dev

Versions

6.24.1

v4/5.x

v3.x

 

Light

 

Dark

 

System

Navigation

Getting Started

Feature Overview

 

Tutorial

 

Examples

 

FAQs

 

Main Concepts

 

Changelog

 

Upgrading

Current Future Flags

 

🆕

Migrating to RouterProvider

 

Upgrading from v5

 

Migrating from @reach/router

 

Routers

Picking a Router

 

🆕

createBrowserRouter

 

🆕

createHashRouter

 

🆕

createMemoryRouter

 

🆕

createStaticHandler

 

🆕

createStaticRouter

 

🆕

RouterProvider

 

🆕

StaticRouterProvider

 

🆕

Router Components

BrowserRouter

 

HashRouter

 

MemoryRouter

 

NativeRouter

 

Router

 

StaticRouter

 

Route

Route

 

🆕

action

 

🆕

errorElement

 

🆕

hydrateFallbackElement

 

🆕

lazy

 

🆕

loader

 

🆕

shouldRevalidate

 

🆕

Components

Await

 

🆕

Form

 

🆕

Link

 

Link (RN)

 

NavLink

 

Navigate

 

Outlet

 

Route

 

Routes

 

ScrollRestoration

 

🆕

Hooks

useActionData

 

🆕

useAsyncError

 

🆕

useAsyncValue

 

🆕

useBeforeUnload

 

🆕

useBlocker

 

useFetcher

 

🆕

useFetchers

 

🆕

useFormAction

 

🆕

useHref

 

useInRouterContext

 

useLinkClickHandler

 

useLinkPressHandler

 

useLoaderData

 

🆕

useLocation

 

useMatch

 

useMatches

 

🆕

useNavigate

 

useNavigation

 

🆕

useNavigationType

 

useOutlet

 

useOutletContext

 

useParams

 

unstable_usePrompt

 

useResolvedPath

 

useRevalidator

 

🆕

useRouteError

 

🆕

useRouteLoaderData

 

🆕

useRoutes

 

useSearchParams

 

useSearchParams (RN)

 

useSubmit

 

🆕

unstable_useViewTransitionState

 

Fetch Utilities

json

 

🆕

redirect

 

🆕

redirectDocument

 

🆕

Utilities

createRoutesFromChildren

 

createRoutesFromElements

 

createSearchParams

 

defer

 

🆕

generatePath

 

isRouteErrorResponse

 

🆕

Location

 

matchPath

 

matchRoutes

 

renderMatches

 

resolvePath

 

Guides

Server-Side Rendering

 

Contributing

 

API Development Strategy

 

🆕

Data Library Integration

 

Deferred Data

 

🆕

Working With FormData

 

🆕

Index Query Param

 

🆕

Getting Started

Feature Overview

 

Tutorial

 

Examples

 

FAQs

 

Main Concepts

 

Changelog

 

Upgrading

Current Future Flags

 

🆕

Migrating to RouterProvider

 

Upgrading from v5

 

Migrating from @reach/router

 

Routers

Picking a Router

 

🆕

createBrowserRouter

 

🆕

createHashRouter

 

🆕

createMemoryRouter

 

🆕

createStaticHandler

 

🆕

createStaticRouter

 

🆕

RouterProvider

 

🆕

StaticRouterProvider

 

🆕

Router Components

BrowserRouter

 

HashRouter

 

MemoryRouter

 

NativeRouter

 

Router

 

StaticRouter

 

Route

Route

 

🆕

action

 

🆕

errorElement

 

🆕

hydrateFallbackElement

 

🆕

lazy

 

🆕

loader

 

🆕

shouldRevalidate

 

🆕

Components

Await

 

🆕

Form

 

🆕

Link

 

Link (RN)

 

NavLink

 

Navigate

 

Outlet

 

Route

 

Routes

 

ScrollRestoration

 

🆕

Hooks

useActionData

 

🆕

useAsyncError

 

🆕

useAsyncValue

 

🆕

useBeforeUnload

 

🆕

useBlocker

 

useFetcher

 

🆕

useFetchers

 

🆕

useFormAction

 

🆕

useHref

 

useInRouterContext

 

useLinkClickHandler

 

useLinkPressHandler

 

useLoaderData

 

🆕

useLocation

 

useMatch

 

useMatches

 

🆕

useNavigate

 

useNavigation

 

🆕

useNavigationType

 

useOutlet

 

useOutletContext

 

useParams

 

unstable_usePrompt

 

useResolvedPath

 

useRevalidator

 

🆕

useRouteError

 

🆕

useRouteLoaderData

 

🆕

useRoutes

 

useSearchParams

 

useSearchParams (RN)

 

useSubmit

 

🆕

unstable_useViewTransitionState

 

Fetch Utilities

json

 

🆕

redirect

 

🆕

redirectDocument

 

🆕

Utilities

createRoutesFromChildren

 

createRoutesFromElements

 

createSearchParams

 

defer

 

🆕

generatePath

 

isRouteErrorResponse

 

🆕

Location

 

matchPath

 

matchRoutes

 

renderMatches

 

resolvePath

 

Guides

Server-Side Rendering

 

Contributing

 

API Development Strategy

 

🆕

Data Library Integration

 

Deferred Data

 

🆕

Working With FormData

 

🆕

Index Query Param

 

🆕

What's New in 6.4?

v6.4 is our most exciting release yet with new data abstractions for reads, writes, and navigation hooks to easily keep your UI in sync with your data. The new feature overview will catch you up.

I'm New

Start with the tutorial. It will quickly introduce you to the primary features of React Router: from configuring routes, to loading and mutating data, to pending and optimistic UI.

I'm on v5

The migration guide will help you migrate incrementally and keep shipping along the way. Or, do it all in one yolo commit! Either way, we've got you covered to start using the new features right away.

I'm Stuck!

Running into a problem? Chances are you're not the first! Explore common questions about React Router v6.

©

 

Remix Software, Inc.

•

Brand

•

Docs and examples

 

CC 4.0

--- End of main_docs.txt ---



--- Start of msal-browser_docs.txt ---

Documentation from https://www.npmjs.com/package/@azure/msal-browser



















@azure/msal-browser - npm
















skip to:

content

package search

sign in

â¤

Pro

Teams

Pricing

Documentation

npm

Search

Sign Up

Sign In

 

@azure/msal-browser

3.18.0

Â â¢Â 

Public

Â â¢Â Published 

9 days ago

 Readme

Code 

Beta

1 Dependency

297 Dependents

110 Versions

Microsoft Authentication Library for JavaScript (MSAL.js) for Browser-Based Single-Page Applications






















Getting Started




AAD Docs




Library Reference
















About




FAQ




Changelog




Roadmap




Prerequisites




Installation







Usage







Migrating from Previous MSAL Versions




MSAL Basics




Advanced Topics










Samples




Build and Test




Authorization Code vs Implicit




Framework Wrappers




Security Reporting




License




Code of Conduct







About




The MSAL library for JavaScript enables client-side JavaScript applications to authenticate users using 

Azure AD

 work and school accounts (AAD), Microsoft personal accounts (MSA) and social identity providers like Facebook, Google, LinkedIn, Microsoft accounts, etc. through 

Azure AD B2C

 service. It also enables your app to get tokens to access 

Microsoft Cloud

 services such as 

Microsoft Graph

.




The 

@azure/msal-browser

 package described by the code in this folder uses the 

@azure/msal-common

 package

 as a dependency to enable authentication in JavaScript Single-Page Applications without backend servers. This version of the library uses the OAuth 2.0 Authorization Code Flow with PKCE. To read more about this protocol, as well as the differences between implicit flow and authorization code flow, see the section 

below

.




This is an improvement upon the previous 

@azure/msal

 library which will utilize the authorization code flow in the browser. Most features available in the old library will be available in this one, but there are nuances to the authentication flow in both. The 

@azure/msal-browser

 package does NOT support the implicit flow.




FAQ




See 

here

.




Roadmap




See 

here

.




Prerequisites










@azure/msal-browser

 is meant to be used in 

Single-Page Application scenarios

.










Before using 

@azure/msal-browser

 you will need to 

register a Single Page Application in Azure AD

 to get a valid 

clientId

 for configuration, and to register the routes that your app will accept redirect traffic on.










Installation




Via NPM




npm

 

install

 @

azure

/

msal

-

browser




Usage




Migrating from Previous MSAL Versions







Migrating from MSAL v1.x to MSAL v2.x




Migrating from MSAL v2.x to MSAL v3.x







MSAL Basics







Initialization




Logging in a User




Acquiring and Using an Access Token




Managing Token Lifetimes




Managing Accounts




Logging Out a User







Advanced Topics







Configuration Options




Request and Response Details




Cache Storage




Performance Enhancements




Instance Aware Flow







Samples




The 

msal-browser-samples

 folder

 contains sample applications for our libraries.




More instructions to run the samples can be found in the 

README.md

 file

 of the VanillaJSTestApp2.0 folder.




More advanced samples backed with a tutorial can be found in the 

Azure Samples

 space on GitHub:







JavaScript SPA calling Express.js web API




JavaScript SPA calling Microsoft Graph via Express.js web API using on-behalf-of flow




Deployment tutorial for Azure App Service and Azure Storage







We also provide samples for addin/plugin scenarios:







Office Addin-in using MSAL.js




Teams Tab using MSAL.js




Chromium Extension using MSAL.js







Build and Test




See the 

contributing.md

 file for more information.




Building the package




To build the 

@azure/msal-browser

 library, you can do the following:




// Change to the msal-browser package directory


cd

 lib/msal-browser/
// To run build only 

for

 browser package
npm run build




To build both the 

@azure/msal-browser

 library and 

@azure/msal-common

 libraries, you can do the following:




// Change to the msal-browser package directory


cd

 lib/msal-browser/
// To run build only 

for

 browser package
npm run build:all




Running Tests




@azure/msal-browser

 uses 

jest

 to run unit tests.




// To run tests
npm 

test


// To run tests with code coverage
npm run test:coverage




Framework Wrappers




If you are using a framework such as Angular or React you may be interested in using one of our wrapper libraries:







Angular: 

@azure/msal-angular v2







React: 

@azure/msal-react










Security Reporting




If you find a security issue with our libraries or services please report it to 

secure@microsoft.com

 with as much detail as possible. Your submission may be eligible for a bounty through the 

Microsoft Bounty

 program. Please do not post security issues to GitHub Issues or any other public site. We will contact you shortly upon receiving the information. We encourage you to get notifications of when security incidents occur by visiting 

this page

 and subscribing to Security Advisory Alerts.




License




Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT License.




We Value and Adhere to the Microsoft Open Source Code of Conduct




This project has adopted the 

Microsoft Open Source Code of Conduct

. For more information see the 

Code of Conduct FAQ

 or contact 

opencode@microsoft.com

 with any additional questions or comments.




Readme

Keywords

implicit

authorization code

PKCE

js

AAD

msal

oauth

Package Sidebar

Install

npm i 

@azure/msal-browser

Repository

Git

github.com/AzureAD/microsoft-authentication-library-for-js

Homepage

github.com/AzureAD/microsoft-authentication-library-for-js#readme

Downloads

Weekly Downloads

2,896,508

Version

3.18.0

License

MIT

Unpacked Size

5.59 MB

Total Files

426

Last publish

9 days ago

Collaborators

Try

 on RunKit

Report

 malware

 

Footer

Support

Help

Advisories

Status

Contact npm

Company

About

Blog

Press

Terms & Policies

Policies

Terms of Use

Code of Conduct

Privacy
















--- End of msal-browser_docs.txt ---



--- Start of msal-react_docs.txt ---

Documentation from https://www.npmjs.com/package/@azure/msal-react



















@azure/msal-react - npm
















skip to:

content

package search

sign in

â¤

Pro

Teams

Pricing

Documentation

npm

Search

Sign Up

Sign In

 

@azure/msal-react

2.0.20

Â â¢Â 

Public

Â â¢Â Published 

9 days ago

 Readme

Code 

Beta

0 Dependencies

101 Dependents

77 Versions

Microsoft Authentication Library for React (msal-react)






















Getting Started




AAD Docs




Library Reference




Samples
















About




FAQ




Changelog




Prerequisites




Version Support




Installation




Build and Test







Usage







Getting Started




Msal Basics




Advanced Topics




MSAL React Specific Concepts










Samples




Security Reporting




License




Code of Conduct







About




The MSAL library for JavaScript enables client-side JavaScript applications to authenticate users using 

Azure AD

 work and school accounts (AAD), Microsoft personal accounts (MSA) and social identity providers like Facebook, Google, LinkedIn, Microsoft accounts, etc. through 

Azure AD B2C

 service. It also enables your app to get tokens to access 

Microsoft Cloud

 services such as 

Microsoft Graph

.




The 

@azure/msal-react

 package described by the code in this folder uses the 

@azure/msal-browser

 package

 as a peer dependency to enable authentication in Javascript Single-Page Applications without backend servers. This version of the library uses the OAuth 2.0 Authorization Code Flow with PKCE. To read more about this protocol, as well as the differences between implicit flow and authorization code flow, see the section in the 

@azure/msal-browser readme

.




Prerequisites










@azure/msal-react

 is meant to be used in 

Single-Page Application scenarios

.










Before using 

@azure/msal-react

 you will need to 

register a Single Page Application in Azure AD

 to get a valid 

clientId

 for configuration, and to register the routes that your app will accept redirect traffic on.










Version Support













MSAL React version




MSAL support status




Supported React versions
















MSAL React v2




Active development




16, 17, 18










MSAL React v1




In maintenance




16, 17, 18













Note:

 There have been no functional changes in the MSAL React v2 release.




Installation




The MSAL React package is available on NPM.




npm install react react-dom
npm install @azure/msal-react @azure/msal-browser




Build and Test




See the 

contributing.md

 file for more information.




Building the package locally




To build the 

@azure/msal-react

 library, you can do the following:




// Install dev dependencies from root of repo
npm install
// Change to the msal-react package directory


cd

 lib/msal-react/
// To run build only 

for

 react package
npm run build




To build both the 

@azure/msal-react

 library and 

@azure/msal-browser

 libraries, you can do the following:




// Install dev dependencies from root of repo
npm install
// Change to the msal-react package directory


cd

 lib/msal-react/
// To run build 

for

 react and browser packages
npm run build:all




Running Tests




@azure/msal-react

 uses 

jest

 to run unit tests and coverage.




// To run tests
npm 

test


// To run tests with code coverage
npm run test:coverage




Usage




For help getting started with 

@azure/msal-react

 please see our 

getting started

 doc.




Migrating from 

react-aad-msal

? Check out our 

migration guide

.




MSAL Basics




Since 

@azure/msal-react

 is a wrapper around 

@azure/msal-browser

 many docs from the 

msal-browser

 repo are relevant here as well. For concepts specific to 

@azure/msal-react

 please see 

below







Initialization




Acquiring and using an access token




Managing token lifetimes




Managing Accounts




Logging out







Advanced Topics







Configuration Options




Request and Response Details




Events




Cache Storage




Performance Enhancements







MSAL React Specific Concepts







Hooks




Events




Class Components




Performance







Samples




Our 

samples directory

 contains several example apps you can spin up to see how this library can be used in different contexts.







Create React App (JS) Sample




Create React App (TS) Sample




Next.js Sample




Gatsby Sample




B2C Sample







More advanced samples backed with a tutorial can be found in the 

Azure Samples

 space on GitHub:







React SPA calling Express.js web API




React SPA calling Express.js web API using App Roles and RBAC




React SPA calling Microsoft Graph via Express.js web API using on-behalf-of flow




Deployment tutorial for Azure Static Web Apps







Security Reporting




If you find a security issue with our libraries or services please report it to 

secure@microsoft.com

 with as much detail as possible. Your submission may be eligible for a bounty through the 

Microsoft Bounty

 program. Please do not post security issues to GitHub Issues or any other public site. We will contact you shortly upon receiving the information. We encourage you to get notifications of when security incidents occur by visiting 

this page

 and subscribing to Security Advisory Alerts.




License




Copyright (c) Microsoft Corporation.  All rights reserved. Licensed under the MIT License.




We Value and Adhere to the Microsoft Open Source Code of Conduct




This project has adopted the 

Microsoft Open Source Code of Conduct

. For more information see the 

Code of Conduct FAQ

 or contact 

opencode@microsoft.com

 with any additional questions or comments.




Readme

Keywords

none

Package Sidebar

Install

npm i 

@azure/msal-react

Repository

Git

github.com/AzureAD/microsoft-authentication-library-for-js

Homepage

github.com/AzureAD/microsoft-authentication-library-for-js#readme

Downloads

Weekly Downloads

335,587

Version

2.0.20

License

MIT

Unpacked Size

102 kB

Total Files

61

Last publish

9 days ago

Collaborators

Try

 on RunKit

Report

 malware

 

Footer

Support

Help

Advisories

Status

Contact npm

Company

About

Blog

Press

Terms & Policies

Policies

Terms of Use

Code of Conduct

Privacy
















--- End of msal-react_docs.txt ---



--- Start of plugin-react_docs.txt ---

Documentation from https://www.npmjs.com/package/@vitejs/plugin-react



















@vitejs/plugin-react - npm
















skip to:

content

package search

sign in

â¤

Pro

Teams

Pricing

Documentation

npm

Search

Sign Up

Sign In

 

@vitejs/plugin-react

4.3.1

Â â¢Â 

Public

Â â¢Â Published 

a month ago

 Readme

Code 

Beta

5 Dependencies

878 Dependents

55 Versions

@vitejs/plugin-react 







The default Vite plugin for React projects.







enable 

Fast Refresh

 in development (requires react >= 16.9)




use the 

automatic JSX runtime







use custom Babel plugins/presets




small installation size







// vite.config.js




import

 

{

 

defineConfig

 

}

 

from

 

'vite'




import

 

react

 

from

 

'@vitejs/plugin-react'





export

 

default

 

defineConfig

(

{


  

plugins

: 

[

react

(

)

]

,




}

)




Options




include/exclude




Includes 

.js

, 

.jsx

, 

.ts

 & 

.tsx

 by default. This option can be used to add fast refresh to 

.mdx

 files:




import

 

{

 

defineConfig

 

}

 

from

 

'vite'




import

 

react

 

from

 

'@vitejs/plugin-react'




import

 

mdx

 

from

 

'@mdx-js/rollup'





export

 

default

 

defineConfig

(

{


  

plugins

: 

[


    

{

 

enforce

: 

'pre'

,

 ...

mdx

(

)

 

}

,


    

react

(

{

 

include

: 

/

\.(mdx|js|jsx|ts|tsx)$

/

 

}

)

,


  

]

,




}

)







node_modules

 are never processed by this plugin (but esbuild will)







jsxImportSource




Control where the JSX factory is imported from. Default to 

'react'




react

(

{

 

jsxImportSource

: 

'@emotion/react'

 

}

)




jsxRuntime




By default, the plugin uses the 

automatic JSX runtime

. However, if you encounter any issues, you may opt out using the 

jsxRuntime

 option.




react

(

{

 

jsxRuntime

: 

'classic'

 

}

)




babel




The 

babel

 option lets you add plugins, presets, and 

other configuration

 to the Babel transformation performed on each included file.




react

(

{


  

babel

: 

{


    

presets

: 

[

...

]

,


    

// Your plugins run before any built-in transform (eg: Fast Refresh)


    

plugins

: 

[

...

]

,


    

// Use .babelrc files


    

babelrc

: 

true

,


    

// Use babel.config.js files


    

configFile

: 

true

,


  

}




}

)




Note: When not using plugins, only esbuild is used for production builds, resulting in faster builds.




Proposed syntax




If you are using ES syntax that are still in proposal status (e.g. class properties), you can selectively enable them with the 

babel.parserOpts.plugins

 option:




react

(

{


  

babel

: 

{


    

parserOpts

: 

{


      

plugins

: 

[

'decorators-legacy'

]

,


    

}

,


  

}

,




}

)




This option does not enable 

code transformation

. That is handled by esbuild.




Note:

 TypeScript syntax is handled automatically.




Here's the 

complete list of Babel parser plugins

.




Middleware mode




In 

middleware mode

, you should make sure your entry 

index.html

 file is transformed by Vite. Here's an example for an Express server:




app

.

get

(

'/'

,

 

async

 

(

req

,

 

res

,

 

next

)

 

=>

 

{


  

try

 

{


    

let

 

html

 

=

 

fs

.

readFileSync

(

path

.

resolve

(

root

,

 

'index.html'

)

,

 

'utf-8'

)



    

// Transform HTML using Vite plugins.


    

html

 

=

 

await

 

viteServer

.

transformIndexHtml

(

req

.

url

,

 

html

)



    

res

.

send

(

html

)


  

}

 

catch

 

(

e

)

 

{


    

return

 

next

(

e

)


  

}




}

)




Otherwise, you'll probably get this error:




Uncaught Error: @vitejs/plugin-react can't detect preamble. Something is wrong.





Consistent components exports




For React refresh to work correctly, your file should only export React components. You can find a good explanation in the 

Gatsby docs

.




If an incompatible change in exports is found, the module will be invalidated and HMR will propagate. To make it easier to export simple constants alongside your component, the module is only invalidated when their value changes.




You can catch mistakes and get more detailed warning with this 

eslint rule

.




Readme

Keywords

none

Package Sidebar

Install

npm i 

@vitejs/plugin-react

Repository

Git

github.com/vitejs/vite-plugin-react

Homepage

github.com/vitejs/vite-plugin-react/tree/main/packages/plugin-react#readme

Downloads

Weekly Downloads

4,475,379

Version

4.3.1

License

MIT

Unpacked Size

36.5 kB

Total Files

9

Last publish

a month ago

Collaborators

Try

 on RunKit

Report

 malware

 

Footer

Support

Help

Advisories

Status

Contact npm

Company

About

Blog

Press

Terms & Policies

Policies

Terms of Use

Code of Conduct

Privacy
















--- End of plugin-react_docs.txt ---



--- Start of react-dnd-html5-backend_docs.txt ---

Documentation from https://www.npmjs.com/package/react-dnd-html5-backend



















react-dnd-html5-backend - npm
















skip to:

content

package search

sign in

â¤

Pro

Teams

Pricing

Documentation

npm

Search

Sign Up

Sign In

 

react-dnd-html5-backend

16.0.1

Â â¢Â 

Public

Â â¢Â Published 

2 years ago

 Readme

Code 

Beta

1 Dependency

3,085 Dependents

79 Versions



















React DnD HTML5 Backend




The officially supported HTML5 backend for 

React DnD

.
See 

the docs

 for usage information.







Installation




If you use 

npm

:




npm install --save react-dnd-html5-backend








Browser Support




We strive to support the evergreen browsers.




Unfortunately the browser bugs, inconsistencies, and regressions come up from time to time, so please make sure you test your app on the browsers youâre interested in, and report any bugs to us.







License




MIT




Readme

Keywords

none

Package Sidebar

Install

npm i 

react-dnd-html5-backend

Repository

Git

github.com/react-dnd/react-dnd

Homepage

github.com/react-dnd/react-dnd#readme

Downloads

Weekly Downloads

1,679,300

Version

16.0.1

License

MIT

Unpacked Size

167 kB

Total Files

67

Last publish

2 years ago

Collaborators

Try

 on RunKit

Report

 malware

 

Footer

Support

Help

Advisories

Status

Contact npm

Company

About

Blog

Press

Terms & Policies

Policies

Terms of Use

Code of Conduct

Privacy
















--- End of react-dnd-html5-backend_docs.txt ---



--- Start of react-dom_docs.txt ---

Documentation from https://www.npmjs.com/package/@types/react-dom



















@types/react-dom - npm
















skip to:

content

package search

sign in

â¤

Pro

Teams

Pricing

Documentation

npm

Search

Sign Up

Sign In

 

@types/react-dom

18.3.0

Â â¢Â 

Public

Â â¢Â Published 

2 months ago

 Readme

Code 

Beta

1 Dependency

13,022 Dependents

149 Versions

Installation







npm install --save @types/react-dom







Summary




This package contains type definitions for react-dom (

https://reactjs.org

).




Details




Files were exported from 

https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react-dom

.




Additional Details







Last updated: Thu, 25 Apr 2024 20:07:03 GMT




Dependencies: 

@types/react










Credits




These definitions were written by 

Asana

, 

AssureSign

, 

Microsoft

, 

MartynasZilinskas

, 

Josh Rutherford

, 

Jessica Franco

, and 

Sebastian Silbermann

.




Readme

Keywords

none

Package Sidebar

Install

npm i 

@types/react-dom

Repository

Git

github.com/DefinitelyTyped/DefinitelyTyped

Homepage

github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react-dom

Downloads

Weekly Downloads

15,336,124

Version

18.3.0

License

MIT

Unpacked Size

37.8 kB

Total Files

11

Last publish

2 months ago

Collaborators

Try

 on RunKit

Report

 malware

 

Footer

Support

Help

Advisories

Status

Contact npm

Company

About

Blog

Press

Terms & Policies

Policies

Terms of Use

Code of Conduct

Privacy
















--- End of react-dom_docs.txt ---



--- Start of react_docs.txt ---

Documentation from https://www.npmjs.com/package/@types/react



















@types/react - npm
















skip to:

content

package search

sign in

â¤

Pro

Teams

Pricing

Documentation

npm

Search

Sign Up

Sign In

 

@types/react

18.3.3

Â â¢Â 

Public

Â â¢Â Published 

2 months ago

 Readme

Code 

Beta

2 Dependencies

18,838 Dependents

596 Versions

Installation







npm install --save @types/react







Summary




This package contains type definitions for react (

https://react.dev/

).




Details




Files were exported from 

https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react

.




Additional Details







Last updated: Thu, 23 May 2024 20:07:44 GMT




Dependencies: 

@types/prop-types

, 

csstype










Credits




These definitions were written by 

Asana

, 

AssureSign

, 

Microsoft

, 

John Reilly

, 

Benoit Benezech

, 

Patricio Zavolinsky

, 

Eric Anderson

, 

Dovydas Navickas

, 

Josh Rutherford

, 

Guilherme HÃ¼bner

, 

Ferdy Budhidharma

, 

Johann Rakotoharisoa

, 

Olivier Pascal

, 

Martin Hochel

, 

Frank Li

, 

Jessica Franco

, 

Saransh Kataria

, 

Kanitkorn Sujautra

, 

Sebastian Silbermann

, 

Kyle Scully

, 

Cong Zhang

, 

Dimitri Mitropoulos

, 

JongChan Choi

, 

Victor MagalhÃ£es

, 

Dale Tan

, 

Priyanshu Rav

, 

Dmitry Semigradsky

, and 

Matt Pocock

.




Readme

Keywords

none

Package Sidebar

Install

npm i 

@types/react

Repository

Git

github.com/DefinitelyTyped/DefinitelyTyped

Homepage

github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react

Downloads

Weekly Downloads

21,443,591

Version

18.3.3

License

MIT

Unpacked Size

437 kB

Total Files

17

Last publish

2 months ago

Collaborators

Try

 on RunKit

Report

 malware

 

Footer

Support

Help

Advisories

Status

Contact npm

Company

About

Blog

Press

Terms & Policies

Policies

Terms of Use

Code of Conduct

Privacy
















--- End of react_docs.txt ---



--- Start of setup_docs.txt ---

Documentation from https://firebase.google.com/docs/web/setup


























































Add Firebase to your JavaScript project








































































































    Build
  
    



















Build




Get to market quickly and securely with products that can scale globally












                      Go to Build
                    






















Build Products











                      App Check
                    

















                      App Hosting
                    

















                      Authentication
                    

















                      Cloud Functions
                    

















                      Cloud Storage
                    

















                      Data Connect
                    

















                      Extensions
                    























                      Firebase ML
                    

















                      Firestore
                    

















                      Genkit
                    

















                      Hosting
                    

















                      Realtime Database
                    

















                      Generative AI
                    





























    Run
  
    



















Run




Run your app with confidence and deliver the best experience for your users












                      Go to Run
                    






















Run Products











                      A/B Testing
                    

















                      App Distribution
                    

















                      Cloud Messaging
                    

















                      Crashlytics
                    

















                      Google Analytics
                    























                      In-App Messaging
                    

















                      Performance Monitoring
                    

















                      Remote Config
                    

















                      Test Lab
                    





























    Solutions
  
    











    Pricing
  
    











    Docs
  
    


























                      Overview
                    

















                      Fundamentals
                    

















                      Build
                    

















                      Run
                    

















                      Reference
                    

















                      Samples
                    





























    Community
  
    


























                      Learn
                    

















                      Events
                    

















                      Stories
                    





























    Support
  
    











































/





































English










Deutsch










Español










Español – América Latina










Français










Indonesia










Italiano










Polski










Português










Português – Brasil










Tiếng Việt










Türkçe










Русский










עברית










العربيّة










فارسی










हिंदी










বাংলা










ภาษาไทย










中文 – 简体










中文 – 繁體










日本語










한국어














    Go to console
  







Sign in



































    
        Documentation
      
  





























    Overview
  
    











    Fundamentals
  
    


























                      Add Firebase - Apple platforms (iOS+)
                    

















                      Add Firebase - Android
                    

















                      Add Firebase - Web
                    

















                      Add Firebase - Flutter
                    

















                      Add Firebase - C++
                    

















                      Add Firebase - Unity
                    

















                      Add Firebase - Server environments
                    

















                      Manage Firebase projects
                    

















                      Supported platforms & frameworks
                    

















                      Use Emulator Suite
                    

















                      AI assistance with Gemini in Firebase
                    





























    Build
  
    


























                      Emulator Suite
                    

















                      Authentication
                    

















                      App Check
                    

















                      Data Connect
                    

















                      Firestore
                    

















                      Realtime Database
                    

















                      Storage
                    

















                      Security Rules
                    

















                      App Hosting
                    

















                      Hosting
                    

















                      Cloud Functions
                    

















                      Extensions
                    

















                      Vertex AI for Firebase
                    

















                      Genkit
                    

















                      ML
                    





























    Run
  
    


























                      Test Lab
                    

















                      App Distribution
                    

















                      Crashlytics
                    

















                      Performance Monitoring
                    

















                      Remote Config
                    

















                      A/B Testing
                    

















                      Analytics
                    

















                      Cloud Messaging
                    

















                      In-App Messaging
                    

















                      Dynamic Links
                    

















                      Google AdMob
                    

















                      Google Ads
                    





























    Reference
  
    











    Samples
  
    























































































































      Build
   

















      More
   





























      Run
   

















      More
   





























      Solutions
   























      Pricing
   

















      Docs
   

















      More
   





























      Overview
   

















      Fundamentals
   























      More
   





























      Build
   























      More
   





























      Run
   























      More
   





























      Reference
   

















      Samples
   























      Community
   























      More
   





























      Support
   

















      Go to console
   






















Fundamentals










Get started with Firebase










Add Firebase to an app




Apple platforms (iOS+)

Android

Web

Flutter







Add Firebase to a game




Overview

C++

Unity

Add Firebase to a server

Set up projects programmatically










Manage your Firebase projects




Understand Firebase projects







Set up development workflows




Overview of environments

General best practices

General security guidelines

Configure multiple projects

Select locations for products & resources







Understand billing




Firebase pricing plans

Avoid surprise bills

Advanced billing alerts & logic

Learn about API keys for Firebase

Export project data to BigQuery

Manage Firebase installations

Import segments




Manage projects programmatically




Use the REST API

Use Terraform







Use the Admin SDK




Node.js

Java

Python

Configure OAuth identity providers for Firebase Auth




Manage project access (IAM)




Overview







Roles




Overview

Owner, Editor, Viewer roles







Firebase predefined roles




Overview

Firebase-level roles

Product-category roles

Product-level roles

Custom roles

Permissions










Platforms and frameworks




Supported platforms & frameworks







Android




Understand Android + Firebase

Migrate to KTX APIs in the main modules

Dependencies of Firebase Android SDKs on Google Play services

Prepare for Google Play data disclosure requirements

Troubleshooting & FAQ







Flutter




Discover Firebase for Flutter







Apple platforms (iOS+)




Understand Apple platforms + Firebase

Installation options

Migrate to Swift extension APIs in the main modules

Link Firebase dependencies statically or dynamically

Prepare for Apple App Store data disclosure requirements

Supporting iOS 14

Troubleshooting & FAQ







Web




Understand Web + Firebase

Upgrade to the modular SDK

Using module bundlers

Web SDK setup alternatives

Use Firebase in PWAs

Supported environments for the Firebase JS SDK







Unity




Understand Unity + Firebase

Additional installation options

Integrate with your Play Games services project

Troubleshooting & FAQ

Debugging the game build, install, and run process







C++




Understand C++ + Firebase










Prototype and test with Emulator Suite




Introduction







Connect your app and prototype




Get started

Connect to the Authentication emulator

Connect to the Realtime Database emulator

Connect to the Firestore emulator

Connect to the Cloud Storage for Firebase emulator

Use the Hosting emulator

Connect to the Cloud Functions emulator

Use the Extensions emulator

Install, configure and integrate










AI assistance with Gemini in Firebase




Introduction

Set up Gemini in Firebase

Try Gemini in the Firebase console

















      Build
   

















      Go to Build
   

















      Build Products
   

















      App Check
   

















      App Hosting
   

















      Authentication
   

















      Cloud Functions
   

















      Cloud Storage
   

















      Data Connect
   

















      Extensions
   

















      Firebase ML
   

















      Firestore
   

















      Genkit
   

















      Hosting
   

















      Realtime Database
   

















      Generative AI
   























      Run
   

















      Go to Run
   

















      Run Products
   

















      A/B Testing
   

















      App Distribution
   

















      Cloud Messaging
   

















      Crashlytics
   

















      Google Analytics
   

















      In-App Messaging
   

















      Performance Monitoring
   

















      Remote Config
   

















      Test Lab
   























      Overview
   

















      Fundamentals
   

















      Build
   

















      Run
   

















      Reference
   

















      Samples
   























      Learn
   

















      Events
   

















      Stories
   























      Add Firebase - Apple platforms (iOS+)
   

















      Add Firebase - Android
   

















      Add Firebase - Web
   

















      Add Firebase - Flutter
   

















      Add Firebase - C++
   

















      Add Firebase - Unity
   

















      Add Firebase - Server environments
   

















      Manage Firebase projects
   

















      Supported platforms & frameworks
   

















      Use Emulator Suite
   

















      AI assistance with Gemini in Firebase
   























      Emulator Suite
   

















      Authentication
   

















      App Check
   

















      Data Connect
   

















      Firestore
   

















      Realtime Database
   

















      Storage
   

















      Security Rules
   

















      App Hosting
   

















      Hosting
   

















      Cloud Functions
   

















      Extensions
   

















      Vertex AI for Firebase
   

















      Genkit
   

















      ML
   























      Test Lab
   

















      App Distribution
   

















      Crashlytics
   

















      Performance Monitoring
   

















      Remote Config
   

















      A/B Testing
   

















      Analytics
   

















      Cloud Messaging
   

















      In-App Messaging
   

















      Dynamic Links
   

















      Google AdMob
   

















      Google Ads
   















































    
        Firebase
      
  














    
        Docs
      
  














    
        Fundamentals
      
  























  
    
    Send feedback
  
  







Add Firebase to your JavaScript project











          
          Stay organized with collections
        





          
          Save and categorize content based on your preferences.
        































Follow this guide to use the Firebase JavaScript SDK in your web app or as a client for
end-user access, for example, in a Node.js desktop or IoT application.




Step 1

: Create a Firebase project and register your app




Before you can add Firebase to your JavaScript app, you need to create a
Firebase project and register your app with that project. When you register your
app with Firebase, you'll get a Firebase configuration object that you'll use to
connect your app with your Firebase project resources.




Note:

 Upgrading from the version 8 Firebase SDK? Check out our 

upgrade
guide

.




Visit 

Understand Firebase Projects

 to learn more
about Firebase projects and best practices for adding apps to projects.










Create a Firebase project













In the 

Firebase console

, click 

Add project

.










To add Firebase resources to an 

existing

 Google Cloud project, enter its
           project name or select it from the dropdown menu.










To create a new project, enter the desired project name. You can also optionally
           edit the project ID displayed below the project name.




Firebase generates a unique ID for your Firebase project
           based upon the name you give it. If you want to edit this project ID, you must
           do it now as it cannot be altered after Firebase provisions resources for your
           project. Visit
           

Understand Firebase Projects

 to
           learn about how Firebase uses the project ID.
         
















If prompted, review and accept the 

Firebase terms

.










Click 

Continue

.










(Optional)

 Set up Google Analytics for your project, which enables you
      to have an optimal experience using any of the following Firebase products:
















Firebase Crashlytics




Firebase Cloud Messaging
















Firebase In-App Messaging




Firebase Remote Config
















Remote Config personalization




Firebase A/B Testing
















Either select an existing
      

Google Analytics account


      or to create a new account.




If you create a new account, select your
      

Analytics reporting location

, then accept
      the data sharing settings and Google Analytics terms for your project.




You can always set up Google Analytics later in the
      

Integrations


      tab of your 

settings

 

Project settings

.
    










Click 

Create project

 (or 

Add Firebase

, if you're using an
      existing Google Cloud project).










Firebase automatically provisions resources for your Firebase project. When
  the process completes, you'll be taken to the overview page for your Firebase
  project in the Firebase console.













Register your app







After you have a Firebase project, you can register your web app with that project.










In the center of the 

Firebase console's project
        overview
        page

, click the 

Web

 icon
      (

plat_web

)
      to launch the setup workflow.
    




If you've already added an app to your Firebase project, click 

Add app

 to
      display the platform options.
    










Enter your app's nickname.


      This nickname is an internal, convenience identifier and is only visible to
      you in the Firebase console.










Click 

Register app

.










Follow the on-screen instructions to add and initialize the Firebase SDK in your app.




You can also find more detailed instructions for adding, initializing, and using the Firebase
      SDK in the next steps of this getting started page.
    













If you don't already have a JavaScript project and just want to try out a
Firebase product, you can download one of our 

quickstart samples

.




Step 2

: Install the SDK and initialize Firebase




This page describes setup instructions for the Firebase JS SDK's modular API,
which uses a 

JavaScript Module

 
format.




This workflow uses npm and requires module bundlers or JavaScript framework
tooling because the modular API is optimized to work with


module bundlers


to eliminate unused code (tree-shaking) and decrease SDK size.




Note:

 Using the modular API is strongly recommended, especially for production apps.
If you need support for calling the API in other ways, like 

window.firebase

,
see 

Upgrade from the namespaced API to the modular API


or 

Alternative ways to add Firebase

.







Install Firebase using npm:




npm install firebase




Initialize Firebase in your app and create a Firebase App object:





import { initializeApp } from 'firebase/app';

// TODO: Replace the following with your app's 

Firebase project configuration


const firebaseConfig = {
  //...
};

const app = initializeApp(firebaseConfig);





A Firebase App is a container-like object that stores common configuration
and shares authentication across Firebase services. After you initialize a
Firebase App object in your code, you can add and start using Firebase
services.




If your app includes dynamic features based on server-side rendering (SSR),
you'll need to take some additional steps to ensure that your configuration
persists across server rendering and client rendering passes. In
your server logic, implement the


FirebaseServerApp

 interface to
optimize your app's


session management with service workers

.




Do you use ESM and want to use browser modules?
  Replace all your 

import

 lines to use the following
  pattern:




import { } from 'https://www.gstatic.com/firebasejs/10.12.3/firebase-

SERVICE

.js'




(where 

SERVICE

 is an SDK name such as
  

firebase-firestore

).

  

Using browser modules is a quick way to get started, but we
    recommend using a module bundler for production.
  










Step 3

: Access Firebase in your app




Firebase services (like Cloud Firestore, Authentication, Realtime Database,
Remote Config, and more) are available to import within individual
sub-packages.




The example below shows how you could use the Cloud Firestore Lite SDK to retrieve
a list of data.





import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs } from 'firebase/firestore/lite';
// Follow this pattern to import other Firebase services
// import { } from 'firebase/<service>';

// TODO: Replace the following with your app's 

Firebase project configuration


const firebaseConfig = {
  //...
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// Get a list of cities from your database
async function getCities(db) {
  const citiesCol = collection(db, 'cities');
  const citySnapshot = await getDocs(citiesCol);
  const cityList = citySnapshot.docs.map(doc => doc.data());
  return cityList;
}





Step 4

: Use a module bundler (webpack/Rollup) for size reduction




Note:

 You can skip this step if you are using a JavaScript framework CLI tool
like the 

Angular CLI

, 

Next.js

,


Vue CLI

, or 

Create React
App

. Check out 

our guide
on module bundling

 for more information.




The Firebase Web SDK is designed to work with module bundlers to remove any
unused code (tree-shaking). We strongly recommend using this approach for
production apps. Tools such as the 

Angular CLI

,


Next.js

, 

Vue CLI

, or 

Create
React App

 automatically
handle module bundling for libraries installed through npm and imported into
your codebase.




See our guide 

Using module bundlers with Firebase

 for more information.




Available Firebase services for web




Now that you're setup to use Firebase, you can start adding and using any of the
following available Firebase services in your web app.







The following commands show how to import Firebase libraries installed locally
with 

npm

. For alternative import options, see the


available libraries documentation

.



















Analytics for Web








          import { } from 'firebase/analytics';
        



















Authentication for Web








          import { } from 'firebase/auth';
        



















Cloud Firestore for Web








          import { } from 'firebase/firestore';
        



















Cloud Functions for Web








          import { } from 'firebase/functions';
        



















Cloud Messaging for Web








          import { } from 'firebase/messaging';
        



















Cloud Storage for Web








          import { } from 'firebase/storage';
        



















Performance Monitoring for Web








          import { } from 'firebase/performance';
        



















Realtime Database for Web








          import { } from 'firebase/database';
        



















Remote Config for Web








          import { } from 'firebase/remote-config';
        



















App Check for Web








          import { } from 'firebase/app-check';
        



















Vertex AI for Firebase for Web








          import { } from 'firebase/vertexai-preview';
        
















Next steps




Learn about Firebase:







Explore 

sample Firebase apps

.




Get hands-on experience with the


Firebase Web Codelab

.




Explore the 

open source code in
GitHub

.




Review the 

supported environments

 for the
Firebase JavaScript SDK.




Speed up your development with additional Firebase-maintained open source
libraries, like


AngularFire

,


RxFire

, and


FirebaseUI for web

.




Prepare to launch your app:







Set up 

budget
alerts


for your project in the Google Cloud console.




Monitor the 

Usage and billing


dashboard

 
in the Firebase console to get an overall picture of your project's
usage across multiple Firebase services.





Review the 

Firebase launch checklist

.





























  
    
    Send feedback
  
  
















Except as otherwise noted, the content of this page is licensed under the 

Creative Commons Attribution 4.0 License

, and code samples are licensed under the 

Apache 2.0 License

. For details, see the 

Google Developers Site Policies

. Java is a registered trademark of Oracle and/or its affiliates.




Last updated 2024-07-08 UTC.




















































Learn











            
          
            Guides
          
          











            
          
            Reference
          
          











            
          
            Samples
          
          











            
          
            Libraries
          
          











            
              
              
            
          
            GitHub
          
          
















Stay connected











            
          
            Blog
          
          











            
          
            Firebase Summit
          
          











            
          
            Twitter
          
          











            
              
              
            
          
            YouTube
          
          
















Support











            
          
            Contact support
          
          











            
          
            Stack Overflow
          
          











            
          
            Slack community
          
          











            
          
            Google group
          
          











            
          
            Release notes
          
          











            
              
              
            
          
            FAQs
          
          
























































          Android
        











          Chrome
        











          Firebase
        











          Google Cloud Platform
        











          All products
        























          Terms
        











          Privacy
        











          Manage cookies
        



















English










Deutsch










Español










Español – América Latina










Français










Indonesia










Italiano










Polski










Português










Português – Brasil










Tiếng Việt










Türkçe










Русский










עברית










العربيّة










فارسی










हिंदी










বাংলা










ภาษาไทย










中文 – 简体










中文 – 繁體










日本語










한국어















































































--- End of setup_docs.txt ---



--- Start of workflow_docs.txt ---

Documentation from https://www.npmjs.com/package/@spectrum-icons/workflow



















@spectrum-icons/workflow - npm
















skip to:

content

package search

sign in

â¤

Pro

Teams

Pricing

Documentation

npm

Search

Sign Up

Sign In

 

@spectrum-icons/workflow

4.2.12

Â â¢Â 

Public

Â â¢Â Published 

2 months ago

 Readme

Code 

Beta

3 Dependencies

34 Dependents

690 Versions

@spectrum-icons/workflow




This package is part of 

react-spectrum

. See the repo for more details.




Readme

Keywords

none

Package Sidebar

Install

npm i 

@spectrum-icons/workflow

Repository

Git

github.com/adobe/react-spectrum

Homepage

github.com/adobe/react-spectrum#readme

Downloads

Weekly Downloads

18,616

Version

4.2.12

License

Apache-2.0

Unpacked Size

1.44 MB

Total Files

3580

Last publish

13 hours ago

Collaborators

Try

 on RunKit

Report

 malware

 

Footer

Support

Help

Advisories

Status

Contact npm

Company

About

Blog

Press

Terms & Policies

Policies

Terms of Use

Code of Conduct

Privacy
















--- End of workflow_docs.txt ---

