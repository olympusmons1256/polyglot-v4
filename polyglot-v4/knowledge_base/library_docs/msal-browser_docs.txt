Documentation from https://www.npmjs.com/package/@azure/msal-browser



















@azure/msal-browser - npm
















skip to:

content

package search

sign in

â¤

Pro

Teams

Pricing

Documentation

npm

Search

Sign Up

Sign In

 

@azure/msal-browser

3.18.0

Â â¢Â 

Public

Â â¢Â Published 

9 days ago

 Readme

Code 

Beta

1 Dependency

297 Dependents

110 Versions

Microsoft Authentication Library for JavaScript (MSAL.js) for Browser-Based Single-Page Applications






















Getting Started




AAD Docs




Library Reference
















About




FAQ




Changelog




Roadmap




Prerequisites




Installation







Usage







Migrating from Previous MSAL Versions




MSAL Basics




Advanced Topics










Samples




Build and Test




Authorization Code vs Implicit




Framework Wrappers




Security Reporting




License




Code of Conduct







About




The MSAL library for JavaScript enables client-side JavaScript applications to authenticate users using 

Azure AD

 work and school accounts (AAD), Microsoft personal accounts (MSA) and social identity providers like Facebook, Google, LinkedIn, Microsoft accounts, etc. through 

Azure AD B2C

 service. It also enables your app to get tokens to access 

Microsoft Cloud

 services such as 

Microsoft Graph

.




The 

@azure/msal-browser

 package described by the code in this folder uses the 

@azure/msal-common

 package

 as a dependency to enable authentication in JavaScript Single-Page Applications without backend servers. This version of the library uses the OAuth 2.0 Authorization Code Flow with PKCE. To read more about this protocol, as well as the differences between implicit flow and authorization code flow, see the section 

below

.




This is an improvement upon the previous 

@azure/msal

 library which will utilize the authorization code flow in the browser. Most features available in the old library will be available in this one, but there are nuances to the authentication flow in both. The 

@azure/msal-browser

 package does NOT support the implicit flow.




FAQ




See 

here

.




Roadmap




See 

here

.




Prerequisites










@azure/msal-browser

 is meant to be used in 

Single-Page Application scenarios

.










Before using 

@azure/msal-browser

 you will need to 

register a Single Page Application in Azure AD

 to get a valid 

clientId

 for configuration, and to register the routes that your app will accept redirect traffic on.










Installation




Via NPM




npm

 

install

 @

azure

/

msal

-

browser




Usage




Migrating from Previous MSAL Versions







Migrating from MSAL v1.x to MSAL v2.x




Migrating from MSAL v2.x to MSAL v3.x







MSAL Basics







Initialization




Logging in a User




Acquiring and Using an Access Token




Managing Token Lifetimes




Managing Accounts




Logging Out a User







Advanced Topics







Configuration Options




Request and Response Details




Cache Storage




Performance Enhancements




Instance Aware Flow







Samples




The 

msal-browser-samples

 folder

 contains sample applications for our libraries.




More instructions to run the samples can be found in the 

README.md

 file

 of the VanillaJSTestApp2.0 folder.




More advanced samples backed with a tutorial can be found in the 

Azure Samples

 space on GitHub:







JavaScript SPA calling Express.js web API




JavaScript SPA calling Microsoft Graph via Express.js web API using on-behalf-of flow




Deployment tutorial for Azure App Service and Azure Storage







We also provide samples for addin/plugin scenarios:







Office Addin-in using MSAL.js




Teams Tab using MSAL.js




Chromium Extension using MSAL.js







Build and Test




See the 

contributing.md

 file for more information.




Building the package




To build the 

@azure/msal-browser

 library, you can do the following:




// Change to the msal-browser package directory


cd

 lib/msal-browser/
// To run build only 

for

 browser package
npm run build




To build both the 

@azure/msal-browser

 library and 

@azure/msal-common

 libraries, you can do the following:




// Change to the msal-browser package directory


cd

 lib/msal-browser/
// To run build only 

for

 browser package
npm run build:all




Running Tests




@azure/msal-browser

 uses 

jest

 to run unit tests.




// To run tests
npm 

test


// To run tests with code coverage
npm run test:coverage




Framework Wrappers




If you are using a framework such as Angular or React you may be interested in using one of our wrapper libraries:







Angular: 

@azure/msal-angular v2







React: 

@azure/msal-react










Security Reporting




If you find a security issue with our libraries or services please report it to 

secure@microsoft.com

 with as much detail as possible. Your submission may be eligible for a bounty through the 

Microsoft Bounty

 program. Please do not post security issues to GitHub Issues or any other public site. We will contact you shortly upon receiving the information. We encourage you to get notifications of when security incidents occur by visiting 

this page

 and subscribing to Security Advisory Alerts.




License




Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT License.




We Value and Adhere to the Microsoft Open Source Code of Conduct




This project has adopted the 

Microsoft Open Source Code of Conduct

. For more information see the 

Code of Conduct FAQ

 or contact 

opencode@microsoft.com

 with any additional questions or comments.




Readme

Keywords

implicit

authorization code

PKCE

js

AAD

msal

oauth

Package Sidebar

Install

npm i 

@azure/msal-browser

Repository

Git

github.com/AzureAD/microsoft-authentication-library-for-js

Homepage

github.com/AzureAD/microsoft-authentication-library-for-js#readme

Downloads

Weekly Downloads

2,896,508

Version

3.18.0

License

MIT

Unpacked Size

5.59 MB

Total Files

426

Last publish

9 days ago

Collaborators

Try

 on RunKit

Report

 malware

 

Footer

Support

Help

Advisories

Status

Contact npm

Company

About

Blog

Press

Terms & Policies

Policies

Terms of Use

Code of Conduct

Privacy














